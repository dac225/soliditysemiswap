{
	"id": "5495b1c154c7ca59623bc8d9734a321e",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.19",
	"solcLongVersion": "0.8.19+commit.7dd6d404",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Exchange.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract Exchange {\n    ERC20 public erc20Token;\n    uint public totalLiquidityPositions;\n    uint public K; // Constant product\n    mapping(address => uint) public liquidityPositions;\n\n    constructor(address _erc20Address) {\n        erc20Token = ERC20(_erc20Address);\n    }\n\n    function provideLiquidity(uint _amountERC20Token) public payable returns (uint liquidity) {\n        uint ethBalance = address(this).balance;\n        uint erc20Balance = erc20Token.balanceOf(address(this));\n        if (totalLiquidityPositions == 0) {\n            liquidity = 100; // if first time it will start with 100 liquidity\n        } else {\n            // Calculate liquidity based on the current pool ratio\n            liquidity = totalLiquidityPositions * _amountERC20Token / erc20Balance;\n        }\n        liquidityPositions[msg.sender] += liquidity;\n        totalLiquidityPositions += liquidity;\n        // Transfer ERC20 tokens from the user to the contract\n        require(erc20Token.transferFrom(msg.sender, address(this), _amountERC20Token), \"ERC20 transfer failed\");\n        K = ethBalance * (erc20Balance + _amountERC20Token);\n        emit LiquidityProvided(msg.sender, _amountERC20Token, msg.value, liquidity); //will update the events in the log\n        return liquidity;\n    }\n\n    function estimateEthToProvide(uint _amountERC20Token) public view returns (uint amountEth) {\n        uint contractEthBalance = address(this).balance;\n        uint contractERC20TokenBalance = erc20Token.balanceOf(address(this));\n        // Check if there's any ERC20 token balance in the contract to avoid division by zero\n        if (contractERC20TokenBalance == 0) {\n            return 0;\n        }\n        // Calculate the amount of Ether required to match the current ratio in the contract\n        amountEth = contractEthBalance * _amountERC20Token / contractERC20TokenBalance;\n        return amountEth;\n    }\n\n    function estimateERC20TokenToProvide(uint _amountEth) public view returns (uint amountERC20Token) {\n        uint contractEthBalance = address(this).balance;\n        uint contractERC20TokenBalance = erc20Token.balanceOf(address(this));\n        if (contractERC20TokenBalance == 0) {\n            return 0;\n        }\n        // calculate the amount of erc 20 tokens to match current ratio in the contract\n        amountERC20Token = contractERC20TokenBalance * (_amountEth/contractEthBalance);\n        return amountERC20Token;\n    }\n\n    function getMyLiquidityPositions() external view returns (uint) {\n        return liquidityPositions[msg.sender];\n    }\n\n    function withdrawLiquidity(uint _liquidityPositionsToBurn) public payable {\n        // make sure user did not give 0 for liquidity positions\n        // make sure we have enough liquidity to burn\n    }\n\n    //events\n    event LiquidityProvided(address provider, uint amountERC20TokenDeposited, uint amountEthDeposited, uint liquidityPositionsIssued);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.19;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.19;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\n\npragma solidity ^0.8.19;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.19;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.19;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x30745a46aa78a205c91a028629a2878d6d6416c747e2a13041c68588d3053df7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aeaea07fc60676cc3e2d2df8d36dd550ba8fa0bb1395178a9b764ab4c049d8a3\",\"dweb:/ipfs/QmeDqVsPV63rJj2uNPfg7SG5Z1KNP6vNgBN1F78kEmz1Jg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x30745a46aa78a205c91a028629a2878d6d6416c747e2a13041c68588d3053df7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aeaea07fc60676cc3e2d2df8d36dd550ba8fa0bb1395178a9b764ab4c049d8a3\",\"dweb:/ipfs/QmeDqVsPV63rJj2uNPfg7SG5Z1KNP6vNgBN1F78kEmz1Jg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x30745a46aa78a205c91a028629a2878d6d6416c747e2a13041c68588d3053df7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aeaea07fc60676cc3e2d2df8d36dd550ba8fa0bb1395178a9b764ab4c049d8a3\",\"dweb:/ipfs/QmeDqVsPV63rJj2uNPfg7SG5Z1KNP6vNgBN1F78kEmz1Jg\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x30745a46aa78a205c91a028629a2878d6d6416c747e2a13041c68588d3053df7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aeaea07fc60676cc3e2d2df8d36dd550ba8fa0bb1395178a9b764ab4c049d8a3\",\"dweb:/ipfs/QmeDqVsPV63rJj2uNPfg7SG5Z1KNP6vNgBN1F78kEmz1Jg\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4b66493cca45dc0ba9bdfb0a60970f9278c11da8de004339944ced80b86c55c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://17bd597781651d2f92f83c60588ed3033665b9e99ba01b2ee64a9cc4f01833bb\",\"dweb:/ipfs/Qmc1BpbKFzwVY5GcTFcShbgebCZNqXAWMorfZPHs43TL2S\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x4ce6e9f30dba5ae30f26321dc851b669caf3f953f8c832304d05df2a523f1af3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb24de66bbfa42093a20d448cb2564655525cba0342035a42a37654e5d922deb\",\"dweb:/ipfs/QmYgnFHamrgy5qurrxVLR1qDb7MirvGEoxCVwqiF1YvDMf\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xfc40fb05166e90621012a05da452eaa14315f16ccf51833fb9c824c40809b06b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c048116af61532acce61f77cdf6e1a4c0195e1d9d2f297c9016b4463e526163\",\"dweb:/ipfs/QmfZ3hZ21ur1ysZsKdXh53LJ3GNZF9CK2UFD8QnAPi4wAJ\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa1a93462fa05ab3ebbde01971ce1c6fb415761fbaab2710b70d0fbe1a53b0689\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://44fedd57d91bcaf205e97d8bc00ddbff05375e32a53bd30f7bfc49a629cc4439\",\"dweb:/ipfs/QmbBJN3zuGqmma6Bdij4AN5zHmgF7txVU1kzrU6rCyWvsW\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 159,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 165,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 167,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 169,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 171,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x4ce6e9f30dba5ae30f26321dc851b669caf3f953f8c832304d05df2a523f1af3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb24de66bbfa42093a20d448cb2564655525cba0342035a42a37654e5d922deb\",\"dweb:/ipfs/QmYgnFHamrgy5qurrxVLR1qDb7MirvGEoxCVwqiF1YvDMf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x4ce6e9f30dba5ae30f26321dc851b669caf3f953f8c832304d05df2a523f1af3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb24de66bbfa42093a20d448cb2564655525cba0342035a42a37654e5d922deb\",\"dweb:/ipfs/QmYgnFHamrgy5qurrxVLR1qDb7MirvGEoxCVwqiF1YvDMf\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xfc40fb05166e90621012a05da452eaa14315f16ccf51833fb9c824c40809b06b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c048116af61532acce61f77cdf6e1a4c0195e1d9d2f297c9016b4463e526163\",\"dweb:/ipfs/QmfZ3hZ21ur1ysZsKdXh53LJ3GNZF9CK2UFD8QnAPi4wAJ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa1a93462fa05ab3ebbde01971ce1c6fb415761fbaab2710b70d0fbe1a53b0689\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://44fedd57d91bcaf205e97d8bc00ddbff05375e32a53bd30f7bfc49a629cc4439\",\"dweb:/ipfs/QmbBJN3zuGqmma6Bdij4AN5zHmgF7txVU1kzrU6rCyWvsW\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/Exchange.sol": {
				"Exchange": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_erc20Address",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "provider",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountERC20TokenDeposited",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountEthDeposited",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "liquidityPositionsIssued",
									"type": "uint256"
								}
							],
							"name": "LiquidityProvided",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "K",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "erc20Token",
							"outputs": [
								{
									"internalType": "contract ERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amountEth",
									"type": "uint256"
								}
							],
							"name": "estimateERC20TokenToProvide",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountERC20Token",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amountERC20Token",
									"type": "uint256"
								}
							],
							"name": "estimateEthToProvide",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountEth",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getMyLiquidityPositions",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "liquidityPositions",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_amountERC20Token",
									"type": "uint256"
								}
							],
							"name": "provideLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalLiquidityPositions",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_liquidityPositionsToBurn",
									"type": "uint256"
								}
							],
							"name": "withdrawLiquidity",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/Exchange.sol\":121:3029  contract Exchange {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/Exchange.sol\":311:396  constructor(address _erc20Address) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/Exchange.sol\":375:388  _erc20Address */\n  dup1\n    /* \"contracts/Exchange.sol\":356:366  erc20Token */\n  0x00\n  dup1\n    /* \"contracts/Exchange.sol\":356:389  erc20Token = ERC20(_erc20Address) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/Exchange.sol\":311:396  constructor(address _erc20Address) {... */\n  pop\n    /* \"contracts/Exchange.sol\":121:3029  contract Exchange {... */\n  jump(tag_6)\n    /* \"#utility.yul\":88:205   */\ntag_8:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_10:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_11:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_20\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_10\n  jump\t// in\ntag_20:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_12:\n    /* \"#utility.yul\":641:665   */\n  tag_22\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_11\n  jump\t// in\ntag_22:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_23\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_23:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_13:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_25\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_12\n  jump\t// in\ntag_25:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_27\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_28\n  tag_8\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":932:1051   */\ntag_27:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_29\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_13\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/Exchange.sol\":121:3029  contract Exchange {... */\ntag_6:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/Exchange.sol\":121:3029  contract Exchange {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_1, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8a13eea7\n      gt\n      tag_11\n      jumpi\n      dup1\n      0x8a13eea7\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xa932492f\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xe0ba2000\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xeb521a4c\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xed7bf868\n      eq\n      tag_10\n      jumpi\n      jump(tag_1)\n    tag_11:\n      dup1\n      0x0a861f2a\n      eq\n      tag_2\n      jumpi\n      dup1\n      0x1cde6226\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x240f3dea\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x6fd0ea92\n      eq\n      tag_5\n      jumpi\n    tag_1:\n      0x00\n      dup1\n      revert\n        /* \"contracts/Exchange.sol\":2678:2878  function withdrawLiquidity(uint _liquidityPositionsToBurn) public payable {... */\n    tag_2:\n      tag_12\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_13\n      swap2\n      swap1\n      tag_14\n      jump\t// in\n    tag_13:\n      tag_15\n      jump\t// in\n    tag_12:\n      stop\n        /* \"contracts/Exchange.sol\":174:209  uint public totalLiquidityPositions */\n    tag_3:\n      callvalue\n      dup1\n      iszero\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_16:\n      pop\n      tag_17\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Exchange.sol\":1403:2015  function estimateEthToProvide(uint _amountERC20Token) public view returns (uint amountEth) {... */\n    tag_4:\n      callvalue\n      dup1\n      iszero\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_21:\n      pop\n      tag_22\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_23\n      swap2\n      swap1\n      tag_14\n      jump\t// in\n    tag_23:\n      tag_24\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Exchange.sol\":254:304  mapping(address => uint) public liquidityPositions */\n    tag_5:\n      callvalue\n      dup1\n      iszero\n      tag_26\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      pop\n      tag_27\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_28\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n    tag_28:\n      tag_30\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      tag_31\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Exchange.sol\":145:168  ERC20 public erc20Token */\n    tag_6:\n      callvalue\n      dup1\n      iszero\n      tag_32\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_32:\n      pop\n      tag_33\n      tag_34\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      tag_35\n      swap2\n      swap1\n      tag_36\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Exchange.sol\":215:228  uint public K */\n    tag_7:\n      callvalue\n      dup1\n      iszero\n      tag_37\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_37:\n      pop\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_40\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Exchange.sol\":2554:2672  function getMyLiquidityPositions() external view returns (uint) {... */\n    tag_8:\n      callvalue\n      dup1\n      iszero\n      tag_41\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_41:\n      pop\n      tag_42\n      tag_43\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_44\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Exchange.sol\":402:1397  function provideLiquidity(uint _amountERC20Token) public payable returns (uint liquidity) {... */\n    tag_9:\n      tag_45\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_46\n      swap2\n      swap1\n      tag_14\n      jump\t// in\n    tag_46:\n      tag_47\n      jump\t// in\n    tag_45:\n      mload(0x40)\n      tag_48\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Exchange.sol\":2021:2548  function estimateERC20TokenToProvide(uint _amountEth) public view returns (uint amountERC20Token) {... */\n    tag_10:\n      callvalue\n      dup1\n      iszero\n      tag_49\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_49:\n      pop\n      tag_50\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_51\n      swap2\n      swap1\n      tag_14\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n    tag_50:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/Exchange.sol\":2678:2878  function withdrawLiquidity(uint _liquidityPositionsToBurn) public payable {... */\n    tag_15:\n      pop\n      jump\t// out\n        /* \"contracts/Exchange.sol\":174:209  uint public totalLiquidityPositions */\n    tag_18:\n      sload(0x01)\n      dup2\n      jump\t// out\n        /* \"contracts/Exchange.sol\":1403:2015  function estimateEthToProvide(uint _amountERC20Token) public view returns (uint amountEth) {... */\n    tag_24:\n        /* \"contracts/Exchange.sol\":1478:1492  uint amountEth */\n      0x00\n        /* \"contracts/Exchange.sol\":1504:1527  uint contractEthBalance */\n      dup1\n        /* \"contracts/Exchange.sol\":1530:1551  address(this).balance */\n      selfbalance\n        /* \"contracts/Exchange.sol\":1504:1551  uint contractEthBalance = address(this).balance */\n      swap1\n      pop\n        /* \"contracts/Exchange.sol\":1561:1591  uint contractERC20TokenBalance */\n      0x00\n        /* \"contracts/Exchange.sol\":1594:1604  erc20Token */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Exchange.sol\":1594:1614  erc20Token.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/Exchange.sol\":1623:1627  this */\n      address\n        /* \"contracts/Exchange.sol\":1594:1629  erc20Token.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_56\n      swap2\n      swap1\n      tag_57\n      jump\t// in\n    tag_56:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_59\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_59:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_60\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_60:\n        /* \"contracts/Exchange.sol\":1561:1629  uint contractERC20TokenBalance = erc20Token.balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/Exchange.sol\":1766:1767  0 */\n      0x00\n        /* \"contracts/Exchange.sol\":1737:1762  contractERC20TokenBalance */\n      dup2\n        /* \"contracts/Exchange.sol\":1737:1767  contractERC20TokenBalance == 0 */\n      sub\n        /* \"contracts/Exchange.sol\":1733:1802  if (contractERC20TokenBalance == 0) {... */\n      tag_62\n      jumpi\n        /* \"contracts/Exchange.sol\":1790:1791  0 */\n      0x00\n        /* \"contracts/Exchange.sol\":1783:1791  return 0 */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_55)\n        /* \"contracts/Exchange.sol\":1733:1802  if (contractERC20TokenBalance == 0) {... */\n    tag_62:\n        /* \"contracts/Exchange.sol\":1957:1982  contractERC20TokenBalance */\n      dup1\n        /* \"contracts/Exchange.sol\":1937:1954  _amountERC20Token */\n      dup5\n        /* \"contracts/Exchange.sol\":1916:1934  contractEthBalance */\n      dup4\n        /* \"contracts/Exchange.sol\":1916:1954  contractEthBalance * _amountERC20Token */\n      tag_63\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_63:\n        /* \"contracts/Exchange.sol\":1916:1982  contractEthBalance * _amountERC20Token / contractERC20TokenBalance */\n      tag_65\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_65:\n        /* \"contracts/Exchange.sol\":1904:1982  amountEth = contractEthBalance * _amountERC20Token / contractERC20TokenBalance */\n      swap3\n      pop\n        /* \"contracts/Exchange.sol\":1992:2008  return amountEth */\n      pop\n      pop\n        /* \"contracts/Exchange.sol\":1403:2015  function estimateEthToProvide(uint _amountERC20Token) public view returns (uint amountEth) {... */\n    tag_55:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Exchange.sol\":254:304  mapping(address => uint) public liquidityPositions */\n    tag_30:\n      mstore(0x20, 0x03)\n      dup1\n      0x00\n      mstore\n      keccak256(0x00, 0x40)\n      0x00\n      swap2\n      pop\n      swap1\n      pop\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/Exchange.sol\":145:168  ERC20 public erc20Token */\n    tag_34:\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/Exchange.sol\":215:228  uint public K */\n    tag_39:\n      sload(0x02)\n      dup2\n      jump\t// out\n        /* \"contracts/Exchange.sol\":2554:2672  function getMyLiquidityPositions() external view returns (uint) {... */\n    tag_43:\n        /* \"contracts/Exchange.sol\":2612:2616  uint */\n      0x00\n        /* \"contracts/Exchange.sol\":2635:2653  liquidityPositions */\n      0x03\n        /* \"contracts/Exchange.sol\":2635:2665  liquidityPositions[msg.sender] */\n      0x00\n        /* \"contracts/Exchange.sol\":2654:2664  msg.sender */\n      caller\n        /* \"contracts/Exchange.sol\":2635:2665  liquidityPositions[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"contracts/Exchange.sol\":2628:2665  return liquidityPositions[msg.sender] */\n      swap1\n      pop\n        /* \"contracts/Exchange.sol\":2554:2672  function getMyLiquidityPositions() external view returns (uint) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/Exchange.sol\":402:1397  function provideLiquidity(uint _amountERC20Token) public payable returns (uint liquidity) {... */\n    tag_47:\n        /* \"contracts/Exchange.sol\":476:490  uint liquidity */\n      0x00\n        /* \"contracts/Exchange.sol\":502:517  uint ethBalance */\n      dup1\n        /* \"contracts/Exchange.sol\":520:541  address(this).balance */\n      selfbalance\n        /* \"contracts/Exchange.sol\":502:541  uint ethBalance = address(this).balance */\n      swap1\n      pop\n        /* \"contracts/Exchange.sol\":551:568  uint erc20Balance */\n      0x00\n        /* \"contracts/Exchange.sol\":571:581  erc20Token */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Exchange.sol\":571:591  erc20Token.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/Exchange.sol\":600:604  this */\n      address\n        /* \"contracts/Exchange.sol\":571:606  erc20Token.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_69\n      swap2\n      swap1\n      tag_57\n      jump\t// in\n    tag_69:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_71\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_71:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_72\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_72:\n        /* \"contracts/Exchange.sol\":551:606  uint erc20Balance = erc20Token.balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/Exchange.sol\":647:648  0 */\n      0x00\n        /* \"contracts/Exchange.sol\":620:643  totalLiquidityPositions */\n      sload(0x01)\n        /* \"contracts/Exchange.sol\":620:648  totalLiquidityPositions == 0 */\n      sub\n        /* \"contracts/Exchange.sol\":616:908  if (totalLiquidityPositions == 0) {... */\n      tag_73\n      jumpi\n        /* \"contracts/Exchange.sol\":676:679  100 */\n      0x64\n        /* \"contracts/Exchange.sol\":664:679  liquidity = 100 */\n      swap3\n      pop\n        /* \"contracts/Exchange.sol\":616:908  if (totalLiquidityPositions == 0) {... */\n      jump(tag_74)\n    tag_73:\n        /* \"contracts/Exchange.sol\":885:897  erc20Balance */\n      dup1\n        /* \"contracts/Exchange.sol\":865:882  _amountERC20Token */\n      dup5\n        /* \"contracts/Exchange.sol\":839:862  totalLiquidityPositions */\n      sload(0x01)\n        /* \"contracts/Exchange.sol\":839:882  totalLiquidityPositions * _amountERC20Token */\n      tag_75\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_75:\n        /* \"contracts/Exchange.sol\":839:897  totalLiquidityPositions * _amountERC20Token / erc20Balance */\n      tag_76\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_76:\n        /* \"contracts/Exchange.sol\":827:897  liquidity = totalLiquidityPositions * _amountERC20Token / erc20Balance */\n      swap3\n      pop\n        /* \"contracts/Exchange.sol\":616:908  if (totalLiquidityPositions == 0) {... */\n    tag_74:\n        /* \"contracts/Exchange.sol\":951:960  liquidity */\n      dup3\n        /* \"contracts/Exchange.sol\":917:935  liquidityPositions */\n      0x03\n        /* \"contracts/Exchange.sol\":917:947  liquidityPositions[msg.sender] */\n      0x00\n        /* \"contracts/Exchange.sol\":936:946  msg.sender */\n      caller\n        /* \"contracts/Exchange.sol\":917:947  liquidityPositions[msg.sender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"contracts/Exchange.sol\":917:960  liquidityPositions[msg.sender] += liquidity */\n      dup3\n      dup3\n      sload\n      tag_77\n      swap2\n      swap1\n      tag_78\n      jump\t// in\n    tag_77:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Exchange.sol\":997:1006  liquidity */\n      dup3\n        /* \"contracts/Exchange.sol\":970:993  totalLiquidityPositions */\n      0x01\n      0x00\n        /* \"contracts/Exchange.sol\":970:1006  totalLiquidityPositions += liquidity */\n      dup3\n      dup3\n      sload\n      tag_79\n      swap2\n      swap1\n      tag_78\n      jump\t// in\n    tag_79:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Exchange.sol\":1087:1097  erc20Token */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Exchange.sol\":1087:1110  erc20Token.transferFrom */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x23b872dd\n        /* \"contracts/Exchange.sol\":1111:1121  msg.sender */\n      caller\n        /* \"contracts/Exchange.sol\":1131:1135  this */\n      address\n        /* \"contracts/Exchange.sol\":1138:1155  _amountERC20Token */\n      dup8\n        /* \"contracts/Exchange.sol\":1087:1156  erc20Token.transferFrom(msg.sender, address(this), _amountERC20Token) */\n      mload(0x40)\n      dup5\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_80\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_81\n      jump\t// in\n    tag_80:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_83\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_83:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_84\n      swap2\n      swap1\n      tag_85\n      jump\t// in\n    tag_84:\n        /* \"contracts/Exchange.sol\":1079:1182  require(erc20Token.transferFrom(msg.sender, address(this), _amountERC20Token), \"ERC20 transfer failed\") */\n      tag_86\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_87\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_86:\n        /* \"contracts/Exchange.sol\":1225:1242  _amountERC20Token */\n      dup4\n        /* \"contracts/Exchange.sol\":1210:1222  erc20Balance */\n      dup2\n        /* \"contracts/Exchange.sol\":1210:1242  erc20Balance + _amountERC20Token */\n      tag_89\n      swap2\n      swap1\n      tag_78\n      jump\t// in\n    tag_89:\n        /* \"contracts/Exchange.sol\":1196:1206  ethBalance */\n      dup3\n        /* \"contracts/Exchange.sol\":1196:1243  ethBalance * (erc20Balance + _amountERC20Token) */\n      tag_90\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_90:\n        /* \"contracts/Exchange.sol\":1192:1193  K */\n      0x02\n        /* \"contracts/Exchange.sol\":1192:1243  K = ethBalance * (erc20Balance + _amountERC20Token) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts/Exchange.sol\":1258:1328  LiquidityProvided(msg.sender, _amountERC20Token, msg.value, liquidity) */\n      0x3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f500\n        /* \"contracts/Exchange.sol\":1276:1286  msg.sender */\n      caller\n        /* \"contracts/Exchange.sol\":1288:1305  _amountERC20Token */\n      dup6\n        /* \"contracts/Exchange.sol\":1307:1316  msg.value */\n      callvalue\n        /* \"contracts/Exchange.sol\":1318:1327  liquidity */\n      dup7\n        /* \"contracts/Exchange.sol\":1258:1328  LiquidityProvided(msg.sender, _amountERC20Token, msg.value, liquidity) */\n      mload(0x40)\n      tag_91\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_91:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"contracts/Exchange.sol\":1374:1390  return liquidity */\n      pop\n      pop\n        /* \"contracts/Exchange.sol\":402:1397  function provideLiquidity(uint _amountERC20Token) public payable returns (uint liquidity) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/Exchange.sol\":2021:2548  function estimateERC20TokenToProvide(uint _amountEth) public view returns (uint amountERC20Token) {... */\n    tag_52:\n        /* \"contracts/Exchange.sol\":2096:2117  uint amountERC20Token */\n      0x00\n        /* \"contracts/Exchange.sol\":2129:2152  uint contractEthBalance */\n      dup1\n        /* \"contracts/Exchange.sol\":2155:2176  address(this).balance */\n      selfbalance\n        /* \"contracts/Exchange.sol\":2129:2176  uint contractEthBalance = address(this).balance */\n      swap1\n      pop\n        /* \"contracts/Exchange.sol\":2186:2216  uint contractERC20TokenBalance */\n      0x00\n        /* \"contracts/Exchange.sol\":2219:2229  erc20Token */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/Exchange.sol\":2219:2239  erc20Token.balanceOf */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x70a08231\n        /* \"contracts/Exchange.sol\":2248:2252  this */\n      address\n        /* \"contracts/Exchange.sol\":2219:2254  erc20Token.balanceOf(address(this)) */\n      mload(0x40)\n      dup3\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      tag_94\n      swap2\n      swap1\n      tag_57\n      jump\t// in\n    tag_94:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_96\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_96:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_97\n      swap2\n      swap1\n      tag_61\n      jump\t// in\n    tag_97:\n        /* \"contracts/Exchange.sol\":2186:2254  uint contractERC20TokenBalance = erc20Token.balanceOf(address(this)) */\n      swap1\n      pop\n        /* \"contracts/Exchange.sol\":2297:2298  0 */\n      0x00\n        /* \"contracts/Exchange.sol\":2268:2293  contractERC20TokenBalance */\n      dup2\n        /* \"contracts/Exchange.sol\":2268:2298  contractERC20TokenBalance == 0 */\n      sub\n        /* \"contracts/Exchange.sol\":2264:2333  if (contractERC20TokenBalance == 0) {... */\n      tag_98\n      jumpi\n        /* \"contracts/Exchange.sol\":2321:2322  0 */\n      0x00\n        /* \"contracts/Exchange.sol\":2314:2322  return 0 */\n      swap3\n      pop\n      pop\n      pop\n      jump(tag_93)\n        /* \"contracts/Exchange.sol\":2264:2333  if (contractERC20TokenBalance == 0) {... */\n    tag_98:\n        /* \"contracts/Exchange.sol\":2489:2507  contractEthBalance */\n      dup2\n        /* \"contracts/Exchange.sol\":2478:2488  _amountEth */\n      dup5\n        /* \"contracts/Exchange.sol\":2478:2507  _amountEth/contractEthBalance */\n      tag_99\n      swap2\n      swap1\n      tag_66\n      jump\t// in\n    tag_99:\n        /* \"contracts/Exchange.sol\":2449:2474  contractERC20TokenBalance */\n      dup2\n        /* \"contracts/Exchange.sol\":2449:2508  contractERC20TokenBalance * (_amountEth/contractEthBalance) */\n      tag_100\n      swap2\n      swap1\n      tag_64\n      jump\t// in\n    tag_100:\n        /* \"contracts/Exchange.sol\":2430:2508  amountERC20Token = contractERC20TokenBalance * (_amountEth/contractEthBalance) */\n      swap3\n      pop\n        /* \"contracts/Exchange.sol\":2518:2541  return amountERC20Token */\n      pop\n      pop\n        /* \"contracts/Exchange.sol\":2021:2548  function estimateERC20TokenToProvide(uint _amountEth) public view returns (uint amountERC20Token) {... */\n    tag_93:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_102:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:411   */\n    tag_104:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":400:405   */\n      dup2\n        /* \"#utility.yul\":389:405   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:411   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":417:539   */\n    tag_105:\n        /* \"#utility.yul\":490:514   */\n      tag_133\n        /* \"#utility.yul\":508:513   */\n      dup2\n        /* \"#utility.yul\":490:514   */\n      tag_104\n      jump\t// in\n    tag_133:\n        /* \"#utility.yul\":483:488   */\n      dup2\n        /* \"#utility.yul\":480:515   */\n      eq\n        /* \"#utility.yul\":470:533   */\n      tag_134\n      jumpi\n        /* \"#utility.yul\":529:530   */\n      0x00\n        /* \"#utility.yul\":526:527   */\n      dup1\n        /* \"#utility.yul\":519:531   */\n      revert\n        /* \"#utility.yul\":470:533   */\n    tag_134:\n        /* \"#utility.yul\":417:539   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":545:684   */\n    tag_106:\n        /* \"#utility.yul\":591:596   */\n      0x00\n        /* \"#utility.yul\":629:635   */\n      dup2\n        /* \"#utility.yul\":616:636   */\n      calldataload\n        /* \"#utility.yul\":607:636   */\n      swap1\n      pop\n        /* \"#utility.yul\":645:678   */\n      tag_136\n        /* \"#utility.yul\":672:677   */\n      dup2\n        /* \"#utility.yul\":645:678   */\n      tag_105\n      jump\t// in\n    tag_136:\n        /* \"#utility.yul\":545:684   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":690:1019   */\n    tag_14:\n        /* \"#utility.yul\":749:755   */\n      0x00\n        /* \"#utility.yul\":798:800   */\n      0x20\n        /* \"#utility.yul\":786:795   */\n      dup3\n        /* \"#utility.yul\":777:784   */\n      dup5\n        /* \"#utility.yul\":773:796   */\n      sub\n        /* \"#utility.yul\":769:801   */\n      slt\n        /* \"#utility.yul\":766:885   */\n      iszero\n      tag_138\n      jumpi\n        /* \"#utility.yul\":804:883   */\n      tag_139\n      tag_102\n      jump\t// in\n    tag_139:\n        /* \"#utility.yul\":766:885   */\n    tag_138:\n        /* \"#utility.yul\":924:925   */\n      0x00\n        /* \"#utility.yul\":949:1002   */\n      tag_140\n        /* \"#utility.yul\":994:1001   */\n      dup5\n        /* \"#utility.yul\":985:991   */\n      dup3\n        /* \"#utility.yul\":974:983   */\n      dup6\n        /* \"#utility.yul\":970:992   */\n      add\n        /* \"#utility.yul\":949:1002   */\n      tag_106\n      jump\t// in\n    tag_140:\n        /* \"#utility.yul\":939:1002   */\n      swap2\n      pop\n        /* \"#utility.yul\":895:1012   */\n      pop\n        /* \"#utility.yul\":690:1019   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1025:1143   */\n    tag_107:\n        /* \"#utility.yul\":1112:1136   */\n      tag_142\n        /* \"#utility.yul\":1130:1135   */\n      dup2\n        /* \"#utility.yul\":1112:1136   */\n      tag_104\n      jump\t// in\n    tag_142:\n        /* \"#utility.yul\":1107:1110   */\n      dup3\n        /* \"#utility.yul\":1100:1137   */\n      mstore\n        /* \"#utility.yul\":1025:1143   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1149:1371   */\n    tag_20:\n        /* \"#utility.yul\":1242:1246   */\n      0x00\n        /* \"#utility.yul\":1280:1282   */\n      0x20\n        /* \"#utility.yul\":1269:1278   */\n      dup3\n        /* \"#utility.yul\":1265:1283   */\n      add\n        /* \"#utility.yul\":1257:1283   */\n      swap1\n      pop\n        /* \"#utility.yul\":1293:1364   */\n      tag_144\n        /* \"#utility.yul\":1361:1362   */\n      0x00\n        /* \"#utility.yul\":1350:1359   */\n      dup4\n        /* \"#utility.yul\":1346:1363   */\n      add\n        /* \"#utility.yul\":1337:1343   */\n      dup5\n        /* \"#utility.yul\":1293:1364   */\n      tag_107\n      jump\t// in\n    tag_144:\n        /* \"#utility.yul\":1149:1371   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1377:1503   */\n    tag_108:\n        /* \"#utility.yul\":1414:1421   */\n      0x00\n        /* \"#utility.yul\":1454:1496   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1447:1452   */\n      dup3\n        /* \"#utility.yul\":1443:1497   */\n      and\n        /* \"#utility.yul\":1432:1497   */\n      swap1\n      pop\n        /* \"#utility.yul\":1377:1503   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1509:1605   */\n    tag_109:\n        /* \"#utility.yul\":1546:1553   */\n      0x00\n        /* \"#utility.yul\":1575:1599   */\n      tag_147\n        /* \"#utility.yul\":1593:1598   */\n      dup3\n        /* \"#utility.yul\":1575:1599   */\n      tag_108\n      jump\t// in\n    tag_147:\n        /* \"#utility.yul\":1564:1599   */\n      swap1\n      pop\n        /* \"#utility.yul\":1509:1605   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1611:1733   */\n    tag_110:\n        /* \"#utility.yul\":1684:1708   */\n      tag_149\n        /* \"#utility.yul\":1702:1707   */\n      dup2\n        /* \"#utility.yul\":1684:1708   */\n      tag_109\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":1677:1682   */\n      dup2\n        /* \"#utility.yul\":1674:1709   */\n      eq\n        /* \"#utility.yul\":1664:1727   */\n      tag_150\n      jumpi\n        /* \"#utility.yul\":1723:1724   */\n      0x00\n        /* \"#utility.yul\":1720:1721   */\n      dup1\n        /* \"#utility.yul\":1713:1725   */\n      revert\n        /* \"#utility.yul\":1664:1727   */\n    tag_150:\n        /* \"#utility.yul\":1611:1733   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1739:1878   */\n    tag_111:\n        /* \"#utility.yul\":1785:1790   */\n      0x00\n        /* \"#utility.yul\":1823:1829   */\n      dup2\n        /* \"#utility.yul\":1810:1830   */\n      calldataload\n        /* \"#utility.yul\":1801:1830   */\n      swap1\n      pop\n        /* \"#utility.yul\":1839:1872   */\n      tag_152\n        /* \"#utility.yul\":1866:1871   */\n      dup2\n        /* \"#utility.yul\":1839:1872   */\n      tag_110\n      jump\t// in\n    tag_152:\n        /* \"#utility.yul\":1739:1878   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1884:2213   */\n    tag_29:\n        /* \"#utility.yul\":1943:1949   */\n      0x00\n        /* \"#utility.yul\":1992:1994   */\n      0x20\n        /* \"#utility.yul\":1980:1989   */\n      dup3\n        /* \"#utility.yul\":1971:1978   */\n      dup5\n        /* \"#utility.yul\":1967:1990   */\n      sub\n        /* \"#utility.yul\":1963:1995   */\n      slt\n        /* \"#utility.yul\":1960:2079   */\n      iszero\n      tag_154\n      jumpi\n        /* \"#utility.yul\":1998:2077   */\n      tag_155\n      tag_102\n      jump\t// in\n    tag_155:\n        /* \"#utility.yul\":1960:2079   */\n    tag_154:\n        /* \"#utility.yul\":2118:2119   */\n      0x00\n        /* \"#utility.yul\":2143:2196   */\n      tag_156\n        /* \"#utility.yul\":2188:2195   */\n      dup5\n        /* \"#utility.yul\":2179:2185   */\n      dup3\n        /* \"#utility.yul\":2168:2177   */\n      dup6\n        /* \"#utility.yul\":2164:2186   */\n      add\n        /* \"#utility.yul\":2143:2196   */\n      tag_111\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":2133:2196   */\n      swap2\n      pop\n        /* \"#utility.yul\":2089:2206   */\n      pop\n        /* \"#utility.yul\":1884:2213   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2219:2279   */\n    tag_112:\n        /* \"#utility.yul\":2247:2250   */\n      0x00\n        /* \"#utility.yul\":2268:2273   */\n      dup2\n        /* \"#utility.yul\":2261:2273   */\n      swap1\n      pop\n        /* \"#utility.yul\":2219:2279   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2285:2427   */\n    tag_113:\n        /* \"#utility.yul\":2335:2344   */\n      0x00\n        /* \"#utility.yul\":2368:2421   */\n      tag_159\n        /* \"#utility.yul\":2386:2420   */\n      tag_160\n        /* \"#utility.yul\":2395:2419   */\n      tag_161\n        /* \"#utility.yul\":2413:2418   */\n      dup5\n        /* \"#utility.yul\":2395:2419   */\n      tag_108\n      jump\t// in\n    tag_161:\n        /* \"#utility.yul\":2386:2420   */\n      tag_112\n      jump\t// in\n    tag_160:\n        /* \"#utility.yul\":2368:2421   */\n      tag_108\n      jump\t// in\n    tag_159:\n        /* \"#utility.yul\":2355:2421   */\n      swap1\n      pop\n        /* \"#utility.yul\":2285:2427   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2433:2559   */\n    tag_114:\n        /* \"#utility.yul\":2483:2492   */\n      0x00\n        /* \"#utility.yul\":2516:2553   */\n      tag_163\n        /* \"#utility.yul\":2547:2552   */\n      dup3\n        /* \"#utility.yul\":2516:2553   */\n      tag_113\n      jump\t// in\n    tag_163:\n        /* \"#utility.yul\":2503:2553   */\n      swap1\n      pop\n        /* \"#utility.yul\":2433:2559   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2565:2704   */\n    tag_115:\n        /* \"#utility.yul\":2628:2637   */\n      0x00\n        /* \"#utility.yul\":2661:2698   */\n      tag_165\n        /* \"#utility.yul\":2692:2697   */\n      dup3\n        /* \"#utility.yul\":2661:2698   */\n      tag_114\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":2648:2698   */\n      swap1\n      pop\n        /* \"#utility.yul\":2565:2704   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2710:2867   */\n    tag_116:\n        /* \"#utility.yul\":2810:2860   */\n      tag_167\n        /* \"#utility.yul\":2854:2859   */\n      dup2\n        /* \"#utility.yul\":2810:2860   */\n      tag_115\n      jump\t// in\n    tag_167:\n        /* \"#utility.yul\":2805:2808   */\n      dup3\n        /* \"#utility.yul\":2798:2861   */\n      mstore\n        /* \"#utility.yul\":2710:2867   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2873:3121   */\n    tag_36:\n        /* \"#utility.yul\":2979:2983   */\n      0x00\n        /* \"#utility.yul\":3017:3019   */\n      0x20\n        /* \"#utility.yul\":3006:3015   */\n      dup3\n        /* \"#utility.yul\":3002:3020   */\n      add\n        /* \"#utility.yul\":2994:3020   */\n      swap1\n      pop\n        /* \"#utility.yul\":3030:3114   */\n      tag_169\n        /* \"#utility.yul\":3111:3112   */\n      0x00\n        /* \"#utility.yul\":3100:3109   */\n      dup4\n        /* \"#utility.yul\":3096:3113   */\n      add\n        /* \"#utility.yul\":3087:3093   */\n      dup5\n        /* \"#utility.yul\":3030:3114   */\n      tag_116\n      jump\t// in\n    tag_169:\n        /* \"#utility.yul\":2873:3121   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3127:3245   */\n    tag_117:\n        /* \"#utility.yul\":3214:3238   */\n      tag_171\n        /* \"#utility.yul\":3232:3237   */\n      dup2\n        /* \"#utility.yul\":3214:3238   */\n      tag_109\n      jump\t// in\n    tag_171:\n        /* \"#utility.yul\":3209:3212   */\n      dup3\n        /* \"#utility.yul\":3202:3239   */\n      mstore\n        /* \"#utility.yul\":3127:3245   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3251:3473   */\n    tag_57:\n        /* \"#utility.yul\":3344:3348   */\n      0x00\n        /* \"#utility.yul\":3382:3384   */\n      0x20\n        /* \"#utility.yul\":3371:3380   */\n      dup3\n        /* \"#utility.yul\":3367:3385   */\n      add\n        /* \"#utility.yul\":3359:3385   */\n      swap1\n      pop\n        /* \"#utility.yul\":3395:3466   */\n      tag_173\n        /* \"#utility.yul\":3463:3464   */\n      0x00\n        /* \"#utility.yul\":3452:3461   */\n      dup4\n        /* \"#utility.yul\":3448:3465   */\n      add\n        /* \"#utility.yul\":3439:3445   */\n      dup5\n        /* \"#utility.yul\":3395:3466   */\n      tag_117\n      jump\t// in\n    tag_173:\n        /* \"#utility.yul\":3251:3473   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3479:3622   */\n    tag_118:\n        /* \"#utility.yul\":3536:3541   */\n      0x00\n        /* \"#utility.yul\":3567:3573   */\n      dup2\n        /* \"#utility.yul\":3561:3574   */\n      mload\n        /* \"#utility.yul\":3552:3574   */\n      swap1\n      pop\n        /* \"#utility.yul\":3583:3616   */\n      tag_175\n        /* \"#utility.yul\":3610:3615   */\n      dup2\n        /* \"#utility.yul\":3583:3616   */\n      tag_105\n      jump\t// in\n    tag_175:\n        /* \"#utility.yul\":3479:3622   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3628:3979   */\n    tag_61:\n        /* \"#utility.yul\":3698:3704   */\n      0x00\n        /* \"#utility.yul\":3747:3749   */\n      0x20\n        /* \"#utility.yul\":3735:3744   */\n      dup3\n        /* \"#utility.yul\":3726:3733   */\n      dup5\n        /* \"#utility.yul\":3722:3745   */\n      sub\n        /* \"#utility.yul\":3718:3750   */\n      slt\n        /* \"#utility.yul\":3715:3834   */\n      iszero\n      tag_177\n      jumpi\n        /* \"#utility.yul\":3753:3832   */\n      tag_178\n      tag_102\n      jump\t// in\n    tag_178:\n        /* \"#utility.yul\":3715:3834   */\n    tag_177:\n        /* \"#utility.yul\":3873:3874   */\n      0x00\n        /* \"#utility.yul\":3898:3962   */\n      tag_179\n        /* \"#utility.yul\":3954:3961   */\n      dup5\n        /* \"#utility.yul\":3945:3951   */\n      dup3\n        /* \"#utility.yul\":3934:3943   */\n      dup6\n        /* \"#utility.yul\":3930:3952   */\n      add\n        /* \"#utility.yul\":3898:3962   */\n      tag_118\n      jump\t// in\n    tag_179:\n        /* \"#utility.yul\":3888:3962   */\n      swap2\n      pop\n        /* \"#utility.yul\":3844:3972   */\n      pop\n        /* \"#utility.yul\":3628:3979   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3985:4165   */\n    tag_119:\n        /* \"#utility.yul\":4033:4110   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4030:4031   */\n      0x00\n        /* \"#utility.yul\":4023:4111   */\n      mstore\n        /* \"#utility.yul\":4130:4134   */\n      0x11\n        /* \"#utility.yul\":4127:4128   */\n      0x04\n        /* \"#utility.yul\":4120:4135   */\n      mstore\n        /* \"#utility.yul\":4154:4158   */\n      0x24\n        /* \"#utility.yul\":4151:4152   */\n      0x00\n        /* \"#utility.yul\":4144:4159   */\n      revert\n        /* \"#utility.yul\":4171:4581   */\n    tag_64:\n        /* \"#utility.yul\":4211:4218   */\n      0x00\n        /* \"#utility.yul\":4234:4254   */\n      tag_182\n        /* \"#utility.yul\":4252:4253   */\n      dup3\n        /* \"#utility.yul\":4234:4254   */\n      tag_104\n      jump\t// in\n    tag_182:\n        /* \"#utility.yul\":4229:4254   */\n      swap2\n      pop\n        /* \"#utility.yul\":4268:4288   */\n      tag_183\n        /* \"#utility.yul\":4286:4287   */\n      dup4\n        /* \"#utility.yul\":4268:4288   */\n      tag_104\n      jump\t// in\n    tag_183:\n        /* \"#utility.yul\":4263:4288   */\n      swap3\n      pop\n        /* \"#utility.yul\":4323:4324   */\n      dup3\n        /* \"#utility.yul\":4320:4321   */\n      dup3\n        /* \"#utility.yul\":4316:4325   */\n      mul\n        /* \"#utility.yul\":4345:4375   */\n      tag_184\n        /* \"#utility.yul\":4363:4374   */\n      dup2\n        /* \"#utility.yul\":4345:4375   */\n      tag_104\n      jump\t// in\n    tag_184:\n        /* \"#utility.yul\":4334:4375   */\n      swap2\n      pop\n        /* \"#utility.yul\":4524:4525   */\n      dup3\n        /* \"#utility.yul\":4515:4522   */\n      dup3\n        /* \"#utility.yul\":4511:4526   */\n      div\n        /* \"#utility.yul\":4508:4509   */\n      dup5\n        /* \"#utility.yul\":4505:4527   */\n      eq\n        /* \"#utility.yul\":4485:4486   */\n      dup4\n        /* \"#utility.yul\":4478:4487   */\n      iszero\n        /* \"#utility.yul\":4458:4541   */\n      or\n        /* \"#utility.yul\":4435:4574   */\n      tag_185\n      jumpi\n        /* \"#utility.yul\":4554:4572   */\n      tag_186\n      tag_119\n      jump\t// in\n    tag_186:\n        /* \"#utility.yul\":4435:4574   */\n    tag_185:\n        /* \"#utility.yul\":4219:4581   */\n      pop\n        /* \"#utility.yul\":4171:4581   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4587:4767   */\n    tag_120:\n        /* \"#utility.yul\":4635:4712   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":4632:4633   */\n      0x00\n        /* \"#utility.yul\":4625:4713   */\n      mstore\n        /* \"#utility.yul\":4732:4736   */\n      0x12\n        /* \"#utility.yul\":4729:4730   */\n      0x04\n        /* \"#utility.yul\":4722:4737   */\n      mstore\n        /* \"#utility.yul\":4756:4760   */\n      0x24\n        /* \"#utility.yul\":4753:4754   */\n      0x00\n        /* \"#utility.yul\":4746:4761   */\n      revert\n        /* \"#utility.yul\":4773:4958   */\n    tag_66:\n        /* \"#utility.yul\":4813:4814   */\n      0x00\n        /* \"#utility.yul\":4830:4850   */\n      tag_189\n        /* \"#utility.yul\":4848:4849   */\n      dup3\n        /* \"#utility.yul\":4830:4850   */\n      tag_104\n      jump\t// in\n    tag_189:\n        /* \"#utility.yul\":4825:4850   */\n      swap2\n      pop\n        /* \"#utility.yul\":4864:4884   */\n      tag_190\n        /* \"#utility.yul\":4882:4883   */\n      dup4\n        /* \"#utility.yul\":4864:4884   */\n      tag_104\n      jump\t// in\n    tag_190:\n        /* \"#utility.yul\":4859:4884   */\n      swap3\n      pop\n        /* \"#utility.yul\":4903:4904   */\n      dup3\n        /* \"#utility.yul\":4893:4928   */\n      tag_191\n      jumpi\n        /* \"#utility.yul\":4908:4926   */\n      tag_192\n      tag_120\n      jump\t// in\n    tag_192:\n        /* \"#utility.yul\":4893:4928   */\n    tag_191:\n        /* \"#utility.yul\":4950:4951   */\n      dup3\n        /* \"#utility.yul\":4947:4948   */\n      dup3\n        /* \"#utility.yul\":4943:4952   */\n      div\n        /* \"#utility.yul\":4938:4952   */\n      swap1\n      pop\n        /* \"#utility.yul\":4773:4958   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4964:5155   */\n    tag_78:\n        /* \"#utility.yul\":5004:5007   */\n      0x00\n        /* \"#utility.yul\":5023:5043   */\n      tag_194\n        /* \"#utility.yul\":5041:5042   */\n      dup3\n        /* \"#utility.yul\":5023:5043   */\n      tag_104\n      jump\t// in\n    tag_194:\n        /* \"#utility.yul\":5018:5043   */\n      swap2\n      pop\n        /* \"#utility.yul\":5057:5077   */\n      tag_195\n        /* \"#utility.yul\":5075:5076   */\n      dup4\n        /* \"#utility.yul\":5057:5077   */\n      tag_104\n      jump\t// in\n    tag_195:\n        /* \"#utility.yul\":5052:5077   */\n      swap3\n      pop\n        /* \"#utility.yul\":5100:5101   */\n      dup3\n        /* \"#utility.yul\":5097:5098   */\n      dup3\n        /* \"#utility.yul\":5093:5102   */\n      add\n        /* \"#utility.yul\":5086:5102   */\n      swap1\n      pop\n        /* \"#utility.yul\":5121:5124   */\n      dup1\n        /* \"#utility.yul\":5118:5119   */\n      dup3\n        /* \"#utility.yul\":5115:5125   */\n      gt\n        /* \"#utility.yul\":5112:5148   */\n      iszero\n      tag_196\n      jumpi\n        /* \"#utility.yul\":5128:5146   */\n      tag_197\n      tag_119\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":5112:5148   */\n    tag_196:\n        /* \"#utility.yul\":4964:5155   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5161:5603   */\n    tag_81:\n        /* \"#utility.yul\":5310:5314   */\n      0x00\n        /* \"#utility.yul\":5348:5350   */\n      0x60\n        /* \"#utility.yul\":5337:5346   */\n      dup3\n        /* \"#utility.yul\":5333:5351   */\n      add\n        /* \"#utility.yul\":5325:5351   */\n      swap1\n      pop\n        /* \"#utility.yul\":5361:5432   */\n      tag_199\n        /* \"#utility.yul\":5429:5430   */\n      0x00\n        /* \"#utility.yul\":5418:5427   */\n      dup4\n        /* \"#utility.yul\":5414:5431   */\n      add\n        /* \"#utility.yul\":5405:5411   */\n      dup7\n        /* \"#utility.yul\":5361:5432   */\n      tag_117\n      jump\t// in\n    tag_199:\n        /* \"#utility.yul\":5442:5514   */\n      tag_200\n        /* \"#utility.yul\":5510:5512   */\n      0x20\n        /* \"#utility.yul\":5499:5508   */\n      dup4\n        /* \"#utility.yul\":5495:5513   */\n      add\n        /* \"#utility.yul\":5486:5492   */\n      dup6\n        /* \"#utility.yul\":5442:5514   */\n      tag_117\n      jump\t// in\n    tag_200:\n        /* \"#utility.yul\":5524:5596   */\n      tag_201\n        /* \"#utility.yul\":5592:5594   */\n      0x40\n        /* \"#utility.yul\":5581:5590   */\n      dup4\n        /* \"#utility.yul\":5577:5595   */\n      add\n        /* \"#utility.yul\":5568:5574   */\n      dup5\n        /* \"#utility.yul\":5524:5596   */\n      tag_107\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":5161:5603   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5609:5699   */\n    tag_121:\n        /* \"#utility.yul\":5643:5650   */\n      0x00\n        /* \"#utility.yul\":5686:5691   */\n      dup2\n        /* \"#utility.yul\":5679:5692   */\n      iszero\n        /* \"#utility.yul\":5672:5693   */\n      iszero\n        /* \"#utility.yul\":5661:5693   */\n      swap1\n      pop\n        /* \"#utility.yul\":5609:5699   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5705:5821   */\n    tag_122:\n        /* \"#utility.yul\":5775:5796   */\n      tag_204\n        /* \"#utility.yul\":5790:5795   */\n      dup2\n        /* \"#utility.yul\":5775:5796   */\n      tag_121\n      jump\t// in\n    tag_204:\n        /* \"#utility.yul\":5768:5773   */\n      dup2\n        /* \"#utility.yul\":5765:5797   */\n      eq\n        /* \"#utility.yul\":5755:5815   */\n      tag_205\n      jumpi\n        /* \"#utility.yul\":5811:5812   */\n      0x00\n        /* \"#utility.yul\":5808:5809   */\n      dup1\n        /* \"#utility.yul\":5801:5813   */\n      revert\n        /* \"#utility.yul\":5755:5815   */\n    tag_205:\n        /* \"#utility.yul\":5705:5821   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5827:5964   */\n    tag_123:\n        /* \"#utility.yul\":5881:5886   */\n      0x00\n        /* \"#utility.yul\":5912:5918   */\n      dup2\n        /* \"#utility.yul\":5906:5919   */\n      mload\n        /* \"#utility.yul\":5897:5919   */\n      swap1\n      pop\n        /* \"#utility.yul\":5928:5958   */\n      tag_207\n        /* \"#utility.yul\":5952:5957   */\n      dup2\n        /* \"#utility.yul\":5928:5958   */\n      tag_122\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":5827:5964   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5970:6315   */\n    tag_85:\n        /* \"#utility.yul\":6037:6043   */\n      0x00\n        /* \"#utility.yul\":6086:6088   */\n      0x20\n        /* \"#utility.yul\":6074:6083   */\n      dup3\n        /* \"#utility.yul\":6065:6072   */\n      dup5\n        /* \"#utility.yul\":6061:6084   */\n      sub\n        /* \"#utility.yul\":6057:6089   */\n      slt\n        /* \"#utility.yul\":6054:6173   */\n      iszero\n      tag_209\n      jumpi\n        /* \"#utility.yul\":6092:6171   */\n      tag_210\n      tag_102\n      jump\t// in\n    tag_210:\n        /* \"#utility.yul\":6054:6173   */\n    tag_209:\n        /* \"#utility.yul\":6212:6213   */\n      0x00\n        /* \"#utility.yul\":6237:6298   */\n      tag_211\n        /* \"#utility.yul\":6290:6297   */\n      dup5\n        /* \"#utility.yul\":6281:6287   */\n      dup3\n        /* \"#utility.yul\":6270:6279   */\n      dup6\n        /* \"#utility.yul\":6266:6288   */\n      add\n        /* \"#utility.yul\":6237:6298   */\n      tag_123\n      jump\t// in\n    tag_211:\n        /* \"#utility.yul\":6227:6298   */\n      swap2\n      pop\n        /* \"#utility.yul\":6183:6308   */\n      pop\n        /* \"#utility.yul\":5970:6315   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6321:6490   */\n    tag_124:\n        /* \"#utility.yul\":6405:6416   */\n      0x00\n        /* \"#utility.yul\":6439:6445   */\n      dup3\n        /* \"#utility.yul\":6434:6437   */\n      dup3\n        /* \"#utility.yul\":6427:6446   */\n      mstore\n        /* \"#utility.yul\":6479:6483   */\n      0x20\n        /* \"#utility.yul\":6474:6477   */\n      dup3\n        /* \"#utility.yul\":6470:6484   */\n      add\n        /* \"#utility.yul\":6455:6484   */\n      swap1\n      pop\n        /* \"#utility.yul\":6321:6490   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6496:6667   */\n    tag_125:\n        /* \"#utility.yul\":6636:6659   */\n      0x4552433230207472616e73666572206661696c65640000000000000000000000\n        /* \"#utility.yul\":6632:6633   */\n      0x00\n        /* \"#utility.yul\":6624:6630   */\n      dup3\n        /* \"#utility.yul\":6620:6634   */\n      add\n        /* \"#utility.yul\":6613:6660   */\n      mstore\n        /* \"#utility.yul\":6496:6667   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6673:7039   */\n    tag_126:\n        /* \"#utility.yul\":6815:6818   */\n      0x00\n        /* \"#utility.yul\":6836:6903   */\n      tag_215\n        /* \"#utility.yul\":6900:6902   */\n      0x15\n        /* \"#utility.yul\":6895:6898   */\n      dup4\n        /* \"#utility.yul\":6836:6903   */\n      tag_124\n      jump\t// in\n    tag_215:\n        /* \"#utility.yul\":6829:6903   */\n      swap2\n      pop\n        /* \"#utility.yul\":6912:7005   */\n      tag_216\n        /* \"#utility.yul\":7001:7004   */\n      dup3\n        /* \"#utility.yul\":6912:7005   */\n      tag_125\n      jump\t// in\n    tag_216:\n        /* \"#utility.yul\":7030:7032   */\n      0x20\n        /* \"#utility.yul\":7025:7028   */\n      dup3\n        /* \"#utility.yul\":7021:7033   */\n      add\n        /* \"#utility.yul\":7014:7033   */\n      swap1\n      pop\n        /* \"#utility.yul\":6673:7039   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7045:7464   */\n    tag_88:\n        /* \"#utility.yul\":7211:7215   */\n      0x00\n        /* \"#utility.yul\":7249:7251   */\n      0x20\n        /* \"#utility.yul\":7238:7247   */\n      dup3\n        /* \"#utility.yul\":7234:7252   */\n      add\n        /* \"#utility.yul\":7226:7252   */\n      swap1\n      pop\n        /* \"#utility.yul\":7298:7307   */\n      dup2\n        /* \"#utility.yul\":7292:7296   */\n      dup2\n        /* \"#utility.yul\":7288:7308   */\n      sub\n        /* \"#utility.yul\":7284:7285   */\n      0x00\n        /* \"#utility.yul\":7273:7282   */\n      dup4\n        /* \"#utility.yul\":7269:7286   */\n      add\n        /* \"#utility.yul\":7262:7309   */\n      mstore\n        /* \"#utility.yul\":7326:7457   */\n      tag_218\n        /* \"#utility.yul\":7452:7456   */\n      dup2\n        /* \"#utility.yul\":7326:7457   */\n      tag_126\n      jump\t// in\n    tag_218:\n        /* \"#utility.yul\":7318:7457   */\n      swap1\n      pop\n        /* \"#utility.yul\":7045:7464   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7470:8023   */\n    tag_92:\n        /* \"#utility.yul\":7647:7651   */\n      0x00\n        /* \"#utility.yul\":7685:7688   */\n      0x80\n        /* \"#utility.yul\":7674:7683   */\n      dup3\n        /* \"#utility.yul\":7670:7689   */\n      add\n        /* \"#utility.yul\":7662:7689   */\n      swap1\n      pop\n        /* \"#utility.yul\":7699:7770   */\n      tag_220\n        /* \"#utility.yul\":7767:7768   */\n      0x00\n        /* \"#utility.yul\":7756:7765   */\n      dup4\n        /* \"#utility.yul\":7752:7769   */\n      add\n        /* \"#utility.yul\":7743:7749   */\n      dup8\n        /* \"#utility.yul\":7699:7770   */\n      tag_117\n      jump\t// in\n    tag_220:\n        /* \"#utility.yul\":7780:7852   */\n      tag_221\n        /* \"#utility.yul\":7848:7850   */\n      0x20\n        /* \"#utility.yul\":7837:7846   */\n      dup4\n        /* \"#utility.yul\":7833:7851   */\n      add\n        /* \"#utility.yul\":7824:7830   */\n      dup7\n        /* \"#utility.yul\":7780:7852   */\n      tag_107\n      jump\t// in\n    tag_221:\n        /* \"#utility.yul\":7862:7934   */\n      tag_222\n        /* \"#utility.yul\":7930:7932   */\n      0x40\n        /* \"#utility.yul\":7919:7928   */\n      dup4\n        /* \"#utility.yul\":7915:7933   */\n      add\n        /* \"#utility.yul\":7906:7912   */\n      dup6\n        /* \"#utility.yul\":7862:7934   */\n      tag_107\n      jump\t// in\n    tag_222:\n        /* \"#utility.yul\":7944:8016   */\n      tag_223\n        /* \"#utility.yul\":8012:8014   */\n      0x60\n        /* \"#utility.yul\":8001:8010   */\n      dup4\n        /* \"#utility.yul\":7997:8015   */\n      add\n        /* \"#utility.yul\":7988:7994   */\n      dup5\n        /* \"#utility.yul\":7944:8016   */\n      tag_107\n      jump\t// in\n    tag_223:\n        /* \"#utility.yul\":7470:8023   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220554c5f4399930e5f603b755c411f10edc5a05e1f816f73b91e8eff7ec8ea8b0864736f6c63430008130033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_803": {
									"entryPoint": null,
									"id": 803,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 198,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 219,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 157,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 125,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 120,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 175,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1199:6",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:6"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:6"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:6",
														"type": ""
													}
												],
												"src": "7:75:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:6"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:6"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:6",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:6",
														"type": ""
													}
												],
												"src": "334:126:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:6",
														"type": ""
													}
												],
												"src": "466:96:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:6"
															},
															"nodeType": "YulIf",
															"src": "621:63:6"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:6",
														"type": ""
													}
												],
												"src": "568:122:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "759:80:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "769:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "778:13:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "800:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "800:33:6"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "737:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "745:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "753:5:6",
														"type": ""
													}
												],
												"src": "696:143:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "922:274:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "968:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "964:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "935:32:6"
															},
															"nodeType": "YulIf",
															"src": "932:119:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "1061:128:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1105:74:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "892:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "903:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "915:6:6",
														"type": ""
													}
												],
												"src": "845:351:6"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50604051610cb4380380610cb4833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b610b9d806101176000396000f3fe6080604052600436106100865760003560e01c80638a13eea7116100595780638a13eea71461014c578063a932492f14610177578063e0ba2000146101a2578063eb521a4c146101cd578063ed7bf868146101fd57610086565b80630a861f2a1461008b5780631cde6226146100a7578063240f3dea146100d25780636fd0ea921461010f575b600080fd5b6100a560048036038101906100a0919061073c565b61023a565b005b3480156100b357600080fd5b506100bc61023d565b6040516100c99190610778565b60405180910390f35b3480156100de57600080fd5b506100f960048036038101906100f4919061073c565b610243565b6040516101069190610778565b60405180910390f35b34801561011b57600080fd5b50610136600480360381019061013191906107f1565b61031c565b6040516101439190610778565b60405180910390f35b34801561015857600080fd5b50610161610334565b60405161016e919061087d565b60405180910390f35b34801561018357600080fd5b5061018c610358565b6040516101999190610778565b60405180910390f35b3480156101ae57600080fd5b506101b761035e565b6040516101c49190610778565b60405180910390f35b6101e760048036038101906101e2919061073c565b6103a5565b6040516101f49190610778565b60405180910390f35b34801561020957600080fd5b50610224600480360381019061021f919061073c565b610628565b6040516102319190610778565b60405180910390f35b50565b60015481565b60008047905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102a591906108a7565b602060405180830381865afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e691906108d7565b9050600081036102fb57600092505050610317565b8084836103089190610933565b61031291906109a4565b925050505b919050565b60036020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008047905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161040791906108a7565b602060405180830381865afa158015610424573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044891906108d7565b905060006001540361045d5760649250610479565b808460015461046c9190610933565b61047691906109a4565b92505b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104c891906109d5565b9250508190555082600160008282546104e191906109d5565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161054593929190610a09565b6020604051808303816000875af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190610a78565b6105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be90610b02565b60405180910390fd5b83816105d391906109d5565b826105de9190610933565b6002819055507f3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f500338534866040516106199493929190610b22565b60405180910390a15050919050565b60008047905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161068a91906108a7565b602060405180830381865afa1580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb91906108d7565b9050600081036106e0576000925050506106fc565b81846106ec91906109a4565b816106f79190610933565b925050505b919050565b600080fd5b6000819050919050565b61071981610706565b811461072457600080fd5b50565b60008135905061073681610710565b92915050565b60006020828403121561075257610751610701565b5b600061076084828501610727565b91505092915050565b61077281610706565b82525050565b600060208201905061078d6000830184610769565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107be82610793565b9050919050565b6107ce816107b3565b81146107d957600080fd5b50565b6000813590506107eb816107c5565b92915050565b60006020828403121561080757610806610701565b5b6000610815848285016107dc565b91505092915050565b6000819050919050565b600061084361083e61083984610793565b61081e565b610793565b9050919050565b600061085582610828565b9050919050565b60006108678261084a565b9050919050565b6108778161085c565b82525050565b6000602082019050610892600083018461086e565b92915050565b6108a1816107b3565b82525050565b60006020820190506108bc6000830184610898565b92915050565b6000815190506108d181610710565b92915050565b6000602082840312156108ed576108ec610701565b5b60006108fb848285016108c2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061093e82610706565b915061094983610706565b925082820261095781610706565b9150828204841483151761096e5761096d610904565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006109af82610706565b91506109ba83610706565b9250826109ca576109c9610975565b5b828204905092915050565b60006109e082610706565b91506109eb83610706565b9250828201905080821115610a0357610a02610904565b5b92915050565b6000606082019050610a1e6000830186610898565b610a2b6020830185610898565b610a386040830184610769565b949350505050565b60008115159050919050565b610a5581610a40565b8114610a6057600080fd5b50565b600081519050610a7281610a4c565b92915050565b600060208284031215610a8e57610a8d610701565b5b6000610a9c84828501610a63565b91505092915050565b600082825260208201905092915050565b7f4552433230207472616e73666572206661696c65640000000000000000000000600082015250565b6000610aec601583610aa5565b9150610af782610ab6565b602082019050919050565b60006020820190508181036000830152610b1b81610adf565b9050919050565b6000608082019050610b376000830187610898565b610b446020830186610769565b610b516040830185610769565b610b5e6060830184610769565b9594505050505056fea2646970667358221220554c5f4399930e5f603b755c411f10edc5a05e1f816f73b91e8eff7ec8ea8b0864736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0xCB4 CODESIZE SUB DUP1 PUSH2 0xCB4 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0xDB JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x108 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA8 DUP3 PUSH2 0x7D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xB8 DUP2 PUSH2 0x9D JUMP JUMPDEST DUP2 EQ PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xD5 DUP2 PUSH2 0xAF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF1 JUMPI PUSH2 0xF0 PUSH2 0x78 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xFF DUP5 DUP3 DUP6 ADD PUSH2 0xC6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xB9D DUP1 PUSH2 0x117 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x86 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8A13EEA7 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x8A13EEA7 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0xA932492F EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0xE0BA2000 EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0xEB521A4C EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xED7BF868 EQ PUSH2 0x1FD JUMPI PUSH2 0x86 JUMP JUMPDEST DUP1 PUSH4 0xA861F2A EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x1CDE6226 EQ PUSH2 0xA7 JUMPI DUP1 PUSH4 0x240F3DEA EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0x6FD0EA92 EQ PUSH2 0x10F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA0 SWAP2 SWAP1 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x23A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBC PUSH2 0x23D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC9 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x106 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x136 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x131 SWAP2 SWAP1 PUSH2 0x7F1 JUMP JUMPDEST PUSH2 0x31C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x143 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x161 PUSH2 0x334 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x87D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x183 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18C PUSH2 0x358 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x199 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH2 0x35E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C4 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x3A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F4 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x224 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21F SWAP2 SWAP1 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x628 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x231 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A5 SWAP2 SWAP1 PUSH2 0x8A7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E6 SWAP2 SWAP1 PUSH2 0x8D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x2FB JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x317 JUMP JUMPDEST DUP1 DUP5 DUP4 PUSH2 0x308 SWAP2 SWAP1 PUSH2 0x933 JUMP JUMPDEST PUSH2 0x312 SWAP2 SWAP1 PUSH2 0x9A4 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x407 SWAP2 SWAP1 PUSH2 0x8A7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x424 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x448 SWAP2 SWAP1 PUSH2 0x8D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 SLOAD SUB PUSH2 0x45D JUMPI PUSH1 0x64 SWAP3 POP PUSH2 0x479 JUMP JUMPDEST DUP1 DUP5 PUSH1 0x1 SLOAD PUSH2 0x46C SWAP2 SWAP1 PUSH2 0x933 JUMP JUMPDEST PUSH2 0x476 SWAP2 SWAP1 PUSH2 0x9A4 JUMP JUMPDEST SWAP3 POP JUMPDEST DUP3 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4C8 SWAP2 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4E1 SWAP2 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x545 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA09 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x564 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x588 SWAP2 SWAP1 PUSH2 0xA78 JUMP JUMPDEST PUSH2 0x5C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5BE SWAP1 PUSH2 0xB02 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP2 PUSH2 0x5D3 SWAP2 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST DUP3 PUSH2 0x5DE SWAP2 SWAP1 PUSH2 0x933 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH32 0x3BCA7014F4C0CCC8016338C79F4C00E82068DBADAF4F01CA5449040FDD39F500 CALLER DUP6 CALLVALUE DUP7 PUSH1 0x40 MLOAD PUSH2 0x619 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68A SWAP2 SWAP1 PUSH2 0x8A7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6CB SWAP2 SWAP1 PUSH2 0x8D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x6E0 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x6FC JUMP JUMPDEST DUP2 DUP5 PUSH2 0x6EC SWAP2 SWAP1 PUSH2 0x9A4 JUMP JUMPDEST DUP2 PUSH2 0x6F7 SWAP2 SWAP1 PUSH2 0x933 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x719 DUP2 PUSH2 0x706 JUMP JUMPDEST DUP2 EQ PUSH2 0x724 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x736 DUP2 PUSH2 0x710 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x752 JUMPI PUSH2 0x751 PUSH2 0x701 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x760 DUP5 DUP3 DUP6 ADD PUSH2 0x727 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x772 DUP2 PUSH2 0x706 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x78D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x769 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7BE DUP3 PUSH2 0x793 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7CE DUP2 PUSH2 0x7B3 JUMP JUMPDEST DUP2 EQ PUSH2 0x7D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x7EB DUP2 PUSH2 0x7C5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x807 JUMPI PUSH2 0x806 PUSH2 0x701 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x815 DUP5 DUP3 DUP6 ADD PUSH2 0x7DC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x843 PUSH2 0x83E PUSH2 0x839 DUP5 PUSH2 0x793 JUMP JUMPDEST PUSH2 0x81E JUMP JUMPDEST PUSH2 0x793 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x855 DUP3 PUSH2 0x828 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x867 DUP3 PUSH2 0x84A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x877 DUP2 PUSH2 0x85C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x892 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x86E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x8A1 DUP2 PUSH2 0x7B3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8BC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x898 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x8D1 DUP2 PUSH2 0x710 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8ED JUMPI PUSH2 0x8EC PUSH2 0x701 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x8FB DUP5 DUP3 DUP6 ADD PUSH2 0x8C2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x93E DUP3 PUSH2 0x706 JUMP JUMPDEST SWAP2 POP PUSH2 0x949 DUP4 PUSH2 0x706 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x957 DUP2 PUSH2 0x706 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x96E JUMPI PUSH2 0x96D PUSH2 0x904 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x9AF DUP3 PUSH2 0x706 JUMP JUMPDEST SWAP2 POP PUSH2 0x9BA DUP4 PUSH2 0x706 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x9CA JUMPI PUSH2 0x9C9 PUSH2 0x975 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E0 DUP3 PUSH2 0x706 JUMP JUMPDEST SWAP2 POP PUSH2 0x9EB DUP4 PUSH2 0x706 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xA03 JUMPI PUSH2 0xA02 PUSH2 0x904 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xA1E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x898 JUMP JUMPDEST PUSH2 0xA2B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x898 JUMP JUMPDEST PUSH2 0xA38 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x769 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA55 DUP2 PUSH2 0xA40 JUMP JUMPDEST DUP2 EQ PUSH2 0xA60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xA72 DUP2 PUSH2 0xA4C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA8E JUMPI PUSH2 0xA8D PUSH2 0x701 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA9C DUP5 DUP3 DUP6 ADD PUSH2 0xA63 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433230207472616E73666572206661696C65640000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAEC PUSH1 0x15 DUP4 PUSH2 0xAA5 JUMP JUMPDEST SWAP2 POP PUSH2 0xAF7 DUP3 PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB1B DUP2 PUSH2 0xADF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0xB37 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x898 JUMP JUMPDEST PUSH2 0xB44 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x769 JUMP JUMPDEST PUSH2 0xB51 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x769 JUMP JUMPDEST PUSH2 0xB5E PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x769 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE 0x4C 0x5F NUMBER SWAP10 SWAP4 0xE 0x5F PUSH1 0x3B PUSH22 0x5C411F10EDC5A05E1F816F73B91E8EFF7EC8EA8B0864 PUSH20 0x6F6C634300081300330000000000000000000000 ",
							"sourceMap": "121:2908:5:-:0;;;311:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;375:13;356:10;;:33;;;;;;;;;;;;;;;;;;311:85;121:2908;;88:117:6;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;121:2908:5:-;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@K_787": {
									"entryPoint": 856,
									"id": 787,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@erc20Token_783": {
									"entryPoint": 820,
									"id": 783,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@estimateERC20TokenToProvide_979": {
									"entryPoint": 1576,
									"id": 979,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@estimateEthToProvide_935": {
									"entryPoint": 579,
									"id": 935,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getMyLiquidityPositions_990": {
									"entryPoint": 862,
									"id": 990,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@liquidityPositions_791": {
									"entryPoint": 796,
									"id": 791,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@provideLiquidity_892": {
									"entryPoint": 933,
									"id": 892,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@totalLiquidityPositions_785": {
									"entryPoint": 573,
									"id": 785,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@withdrawLiquidity_996": {
									"entryPoint": 570,
									"id": 996,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 2012,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bool_fromMemory": {
									"entryPoint": 2659,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 1831,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256_fromMemory": {
									"entryPoint": 2242,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2033,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 2680,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 1852,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256_fromMemory": {
									"entryPoint": 2263,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 2200,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_contract$_ERC20_$651_to_t_address_fromStack": {
									"entryPoint": 2158,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2783,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 1897,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 2215,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": 2569,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 2850,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_ERC20_$651__to_t_address__fromStack_reversed": {
									"entryPoint": 2173,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2818,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 1912,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 2725,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2517,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_t_uint256": {
									"entryPoint": 2468,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 2355,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 1971,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 2624,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 1939,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 1798,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_contract$_ERC20_$651_to_t_address": {
									"entryPoint": 2140,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_address": {
									"entryPoint": 2122,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint160_to_t_uint160": {
									"entryPoint": 2088,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 2078,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 2308,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x12": {
									"entryPoint": 2421,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 1793,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"store_literal_in_memory_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff": {
									"entryPoint": 2742,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 1989,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bool": {
									"entryPoint": 2636,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 1808,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:8026:6",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:6",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:6"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:6"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:6",
														"type": ""
													}
												],
												"src": "7:75:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:6"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:6",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:6"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:32:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:16:6",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "400:5:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:6",
														"type": ""
													}
												],
												"src": "334:77:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "460:79:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "517:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "526:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "529:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "519:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "519:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "519:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "483:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "508:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "490:17:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:24:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "480:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "480:35:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "473:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "473:43:6"
															},
															"nodeType": "YulIf",
															"src": "470:63:6"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "453:5:6",
														"type": ""
													}
												],
												"src": "417:122:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "597:87:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "607:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "629:6:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "616:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "616:20:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "607:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "672:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "645:26:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "645:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "645:33:6"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "575:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "583:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "591:5:6",
														"type": ""
													}
												],
												"src": "545:139:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "756:263:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "802:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "804:77:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:79:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "804:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "777:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "786:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "773:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "773:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "798:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "769:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "769:32:6"
															},
															"nodeType": "YulIf",
															"src": "766:119:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "895:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "910:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "924:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "914:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "939:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "974:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "985:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "970:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "970:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "994:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "949:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "949:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "939:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "726:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "737:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "749:6:6",
														"type": ""
													}
												],
												"src": "690:329:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1090:53:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1107:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1130:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1112:17:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1112:24:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1100:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1100:37:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1100:37:6"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1078:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1085:3:6",
														"type": ""
													}
												],
												"src": "1025:118:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1247:124:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1257:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1269:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1280:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1265:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1265:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1257:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1337:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1350:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1361:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1346:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1346:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1293:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1293:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1293:71:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1219:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1231:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1242:4:6",
														"type": ""
													}
												],
												"src": "1149:222:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1422:81:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1432:65:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1447:5:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1454:42:6",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1443:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1443:54:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1432:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1404:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1414:7:6",
														"type": ""
													}
												],
												"src": "1377:126:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1554:51:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1564:35:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1593:5:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "1575:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1575:24:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1564:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1536:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1546:7:6",
														"type": ""
													}
												],
												"src": "1509:96:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1654:79:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1711:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1720:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1723:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1713:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1713:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1713:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1677:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1702:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "1684:17:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1684:24:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1674:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1674:35:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1667:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1667:43:6"
															},
															"nodeType": "YulIf",
															"src": "1664:63:6"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1647:5:6",
														"type": ""
													}
												],
												"src": "1611:122:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1791:87:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1801:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1823:6:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1810:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1810:20:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1801:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1866:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1839:26:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1839:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1839:33:6"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1769:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1777:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1785:5:6",
														"type": ""
													}
												],
												"src": "1739:139:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1950:263:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1996:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1998:77:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1998:79:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1998:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1971:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1980:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1967:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1967:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1992:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1963:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1963:32:6"
															},
															"nodeType": "YulIf",
															"src": "1960:119:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "2089:117:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "2104:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2118:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "2108:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "2133:63:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "2168:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "2179:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2164:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2164:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2188:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2143:20:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2143:53:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "2133:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1920:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1931:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1943:6:6",
														"type": ""
													}
												],
												"src": "1884:329:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2251:28:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2261:12:6",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2268:5:6"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "2261:3:6"
																}
															]
														}
													]
												},
												"name": "identity",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2237:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "2247:3:6",
														"type": ""
													}
												],
												"src": "2219:60:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2345:82:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2355:66:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2413:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint160",
																					"nodeType": "YulIdentifier",
																					"src": "2395:17:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2395:24:6"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nodeType": "YulIdentifier",
																			"src": "2386:8:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2386:34:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2368:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2368:53:6"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "2355:9:6"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2325:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "2335:9:6",
														"type": ""
													}
												],
												"src": "2285:142:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2493:66:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2503:50:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2547:5:6"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "2516:30:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2516:37:6"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "2503:9:6"
																}
															]
														}
													]
												},
												"name": "convert_t_uint160_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2473:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "2483:9:6",
														"type": ""
													}
												],
												"src": "2433:126:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2638:66:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2648:50:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2692:5:6"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint160_to_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "2661:30:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2661:37:6"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nodeType": "YulIdentifier",
																	"src": "2648:9:6"
																}
															]
														}
													]
												},
												"name": "convert_t_contract$_ERC20_$651_to_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2618:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nodeType": "YulTypedName",
														"src": "2628:9:6",
														"type": ""
													}
												],
												"src": "2565:139:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2788:79:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2805:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2854:5:6"
																			}
																		],
																		"functionName": {
																			"name": "convert_t_contract$_ERC20_$651_to_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "2810:43:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2810:50:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2798:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2798:63:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2798:63:6"
														}
													]
												},
												"name": "abi_encode_t_contract$_ERC20_$651_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2776:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "2783:3:6",
														"type": ""
													}
												],
												"src": "2710:157:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2984:137:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2994:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3006:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3017:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3002:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3002:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2994:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3087:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3100:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3111:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3096:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3096:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_contract$_ERC20_$651_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3030:56:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3030:84:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3030:84:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ERC20_$651__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2956:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2968:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2979:4:6",
														"type": ""
													}
												],
												"src": "2873:248:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3192:53:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3209:3:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3232:5:6"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "3214:17:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3214:24:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3202:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3202:37:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3202:37:6"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3180:5:6",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3187:3:6",
														"type": ""
													}
												],
												"src": "3127:118:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3349:124:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3359:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3371:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3382:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3367:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3367:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3359:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3439:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3452:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3463:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3448:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3448:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "3395:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3395:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3395:71:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3321:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3333:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3344:4:6",
														"type": ""
													}
												],
												"src": "3251:222:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3542:80:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3552:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "3567:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3561:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3561:13:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "3552:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3610:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "3583:26:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3583:33:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3583:33:6"
														}
													]
												},
												"name": "abi_decode_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "3520:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3528:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "3536:5:6",
														"type": ""
													}
												],
												"src": "3479:143:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3705:274:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3751:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "3753:77:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3753:79:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3753:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3726:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3735:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3722:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3722:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3747:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3718:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "3718:32:6"
															},
															"nodeType": "YulIf",
															"src": "3715:119:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "3844:128:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "3859:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3873:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "3863:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "3888:74:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "3934:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "3945:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3930:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3930:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3954:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "3898:31:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3898:64:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "3888:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3675:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3686:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3698:6:6",
														"type": ""
													}
												],
												"src": "3628:351:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4013:152:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4030:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4033:77:6",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4023:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4023:88:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4023:88:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4127:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4130:4:6",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4120:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4120:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4120:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4151:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4154:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4144:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4144:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4144:15:6"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "3985:180:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4219:362:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4229:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4252:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4234:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4234:20:6"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "4229:1:6"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4263:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4286:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4268:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4268:20:6"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "4263:1:6"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4297:28:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4320:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4323:1:6"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "4316:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4316:9:6"
															},
															"variables": [
																{
																	"name": "product_raw",
																	"nodeType": "YulTypedName",
																	"src": "4301:11:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4334:41:6",
															"value": {
																"arguments": [
																	{
																		"name": "product_raw",
																		"nodeType": "YulIdentifier",
																		"src": "4363:11:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4345:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4345:30:6"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "4334:7:6"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4552:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4554:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4554:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4554:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4485:1:6"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4478:6:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4478:9:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nodeType": "YulIdentifier",
																						"src": "4508:1:6"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nodeType": "YulIdentifier",
																								"src": "4515:7:6"
																							},
																							{
																								"name": "x",
																								"nodeType": "YulIdentifier",
																								"src": "4524:1:6"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nodeType": "YulIdentifier",
																							"src": "4511:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4511:15:6"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nodeType": "YulIdentifier",
																					"src": "4505:2:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4505:22:6"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nodeType": "YulIdentifier",
																			"src": "4458:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4458:83:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4438:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4438:113:6"
															},
															"nodeType": "YulIf",
															"src": "4435:139:6"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4202:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4205:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "4211:7:6",
														"type": ""
													}
												],
												"src": "4171:410:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4615:152:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4632:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4635:77:6",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4625:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4625:88:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4625:88:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4729:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4732:4:6",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4722:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4722:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4722:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4753:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4756:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "4746:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4746:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4746:15:6"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "4587:180:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4815:143:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4825:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4848:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4830:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4830:20:6"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "4825:1:6"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4859:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4882:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "4864:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4864:20:6"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "4859:1:6"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4906:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x12",
																				"nodeType": "YulIdentifier",
																				"src": "4908:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4908:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4908:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4903:1:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4896:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4896:9:6"
															},
															"nodeType": "YulIf",
															"src": "4893:35:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4938:14:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "4947:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "4950:1:6"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "4943:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "4943:9:6"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "4938:1:6"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4804:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4807:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "4813:1:6",
														"type": ""
													}
												],
												"src": "4773:185:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5008:147:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5018:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5041:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "5023:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5023:20:6"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "5018:1:6"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5052:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5075:1:6"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "5057:17:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5057:20:6"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "5052:1:6"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5086:16:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5097:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5100:1:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5093:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5093:9:6"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5086:3:6"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5126:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "5128:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5128:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5128:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5118:1:6"
																	},
																	{
																		"name": "sum",
																		"nodeType": "YulIdentifier",
																		"src": "5121:3:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5115:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5115:10:6"
															},
															"nodeType": "YulIf",
															"src": "5112:36:6"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4995:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4998:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5004:3:6",
														"type": ""
													}
												],
												"src": "4964:191:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5315:288:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5325:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5337:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5348:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5333:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5333:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5325:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5405:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5418:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5429:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5414:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5414:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5361:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5361:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5361:71:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "5486:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5499:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5510:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5495:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5495:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5442:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5442:72:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5442:72:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "5568:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5581:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5592:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5577:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5577:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "5524:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5524:72:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5524:72:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5271:9:6",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5283:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5291:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5299:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5310:4:6",
														"type": ""
													}
												],
												"src": "5161:442:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5651:48:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5661:32:6",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5686:5:6"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5679:6:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5679:13:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5672:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5672:21:6"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "5661:7:6"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5633:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "5643:7:6",
														"type": ""
													}
												],
												"src": "5609:90:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5745:76:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5799:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5808:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5811:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5801:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5801:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5801:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "5768:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "5790:5:6"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bool",
																					"nodeType": "YulIdentifier",
																					"src": "5775:14:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5775:21:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "5765:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5765:32:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5758:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5758:40:6"
															},
															"nodeType": "YulIf",
															"src": "5755:60:6"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5738:5:6",
														"type": ""
													}
												],
												"src": "5705:116:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5887:77:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5897:22:6",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "5912:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5906:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5906:13:6"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "5897:5:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5952:5:6"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "5928:23:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "5928:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5928:30:6"
														}
													]
												},
												"name": "abi_decode_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "5865:6:6",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "5873:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "5881:5:6",
														"type": ""
													}
												],
												"src": "5827:137:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6044:271:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6090:83:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "6092:77:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6092:79:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6092:79:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6065:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6074:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "6061:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6061:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6086:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "6057:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6057:32:6"
															},
															"nodeType": "YulIf",
															"src": "6054:119:6"
														},
														{
															"nodeType": "YulBlock",
															"src": "6183:125:6",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "6198:15:6",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6212:1:6",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "6202:6:6",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6227:71:6",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "6270:9:6"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "6281:6:6"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "6266:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6266:22:6"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "6290:7:6"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bool_fromMemory",
																			"nodeType": "YulIdentifier",
																			"src": "6237:28:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6237:61:6"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "6227:6:6"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6014:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "6025:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6037:6:6",
														"type": ""
													}
												],
												"src": "5970:345:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6417:73:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6434:3:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6439:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6427:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6427:19:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6427:19:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6455:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6474:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6479:4:6",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6470:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6470:14:6"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "6455:11:6"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6389:3:6",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6394:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "6405:11:6",
														"type": ""
													}
												],
												"src": "6321:169:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6602:65:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "6624:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6632:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6620:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6620:14:6"
																	},
																	{
																		"hexValue": "4552433230207472616e73666572206661696c6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6636:23:6",
																		"type": "",
																		"value": "ERC20 transfer failed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6613:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6613:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6613:47:6"
														}
													]
												},
												"name": "store_literal_in_memory_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "6594:6:6",
														"type": ""
													}
												],
												"src": "6496:171:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6819:220:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6829:74:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6895:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6900:2:6",
																		"type": "",
																		"value": "21"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "6836:58:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6836:67:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "6829:3:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7001:3:6"
																	}
																],
																"functionName": {
																	"name": "store_literal_in_memory_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff",
																	"nodeType": "YulIdentifier",
																	"src": "6912:88:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "6912:93:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6912:93:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7014:19:6",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "7025:3:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7030:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7021:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7021:12:6"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "7014:3:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff_to_t_string_memory_ptr_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6807:3:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6815:3:6",
														"type": ""
													}
												],
												"src": "6673:366:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7216:248:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7226:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7238:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7249:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7234:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7234:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7226:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7273:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7284:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7269:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7269:17:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nodeType": "YulIdentifier",
																				"src": "7292:4:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7298:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7288:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7288:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7262:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7262:47:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7262:47:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7318:139:6",
															"value": {
																"arguments": [
																	{
																		"name": "tail",
																		"nodeType": "YulIdentifier",
																		"src": "7452:4:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff_to_t_string_memory_ptr_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7326:124:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7326:131:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7318:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7196:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7211:4:6",
														"type": ""
													}
												],
												"src": "7045:419:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7652:371:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7662:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7674:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7685:3:6",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7670:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7670:19:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7662:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7743:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7756:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7767:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7752:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7752:17:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7699:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7699:71:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7699:71:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "7824:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7837:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7848:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7833:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7833:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7780:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7780:72:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7780:72:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7906:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7919:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7930:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7915:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7915:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7862:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7862:72:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7862:72:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "7988:6:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8001:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8012:2:6",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7997:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7997:18:6"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "7944:43:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "7944:72:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7944:72:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7600:9:6",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "7612:6:6",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7620:6:6",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7628:6:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7636:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7647:4:6",
														"type": ""
													}
												],
												"src": "7470:553:6"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_ERC20_$651_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_ERC20_$651_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_ERC20_$651_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_ERC20_$651__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_ERC20_$651_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        let product_raw := mul(x, y)\n        product := cleanup_t_uint256(product_raw)\n\n        // overflow, if x != 0 and y != product/x\n        if iszero(\n            or(\n                iszero(x),\n                eq(y, div(product, x))\n            )\n        ) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC20 transfer failed\")\n\n    }\n\n    function abi_encode_t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n}\n",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600436106100865760003560e01c80638a13eea7116100595780638a13eea71461014c578063a932492f14610177578063e0ba2000146101a2578063eb521a4c146101cd578063ed7bf868146101fd57610086565b80630a861f2a1461008b5780631cde6226146100a7578063240f3dea146100d25780636fd0ea921461010f575b600080fd5b6100a560048036038101906100a0919061073c565b61023a565b005b3480156100b357600080fd5b506100bc61023d565b6040516100c99190610778565b60405180910390f35b3480156100de57600080fd5b506100f960048036038101906100f4919061073c565b610243565b6040516101069190610778565b60405180910390f35b34801561011b57600080fd5b50610136600480360381019061013191906107f1565b61031c565b6040516101439190610778565b60405180910390f35b34801561015857600080fd5b50610161610334565b60405161016e919061087d565b60405180910390f35b34801561018357600080fd5b5061018c610358565b6040516101999190610778565b60405180910390f35b3480156101ae57600080fd5b506101b761035e565b6040516101c49190610778565b60405180910390f35b6101e760048036038101906101e2919061073c565b6103a5565b6040516101f49190610778565b60405180910390f35b34801561020957600080fd5b50610224600480360381019061021f919061073c565b610628565b6040516102319190610778565b60405180910390f35b50565b60015481565b60008047905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102a591906108a7565b602060405180830381865afa1580156102c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e691906108d7565b9050600081036102fb57600092505050610317565b8084836103089190610933565b61031291906109a4565b925050505b919050565b60036020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60008047905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161040791906108a7565b602060405180830381865afa158015610424573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044891906108d7565b905060006001540361045d5760649250610479565b808460015461046c9190610933565b61047691906109a4565b92505b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104c891906109d5565b9250508190555082600160008282546104e191906109d5565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161054593929190610a09565b6020604051808303816000875af1158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190610a78565b6105c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105be90610b02565b60405180910390fd5b83816105d391906109d5565b826105de9190610933565b6002819055507f3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f500338534866040516106199493929190610b22565b60405180910390a15050919050565b60008047905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161068a91906108a7565b602060405180830381865afa1580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb91906108d7565b9050600081036106e0576000925050506106fc565b81846106ec91906109a4565b816106f79190610933565b925050505b919050565b600080fd5b6000819050919050565b61071981610706565b811461072457600080fd5b50565b60008135905061073681610710565b92915050565b60006020828403121561075257610751610701565b5b600061076084828501610727565b91505092915050565b61077281610706565b82525050565b600060208201905061078d6000830184610769565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107be82610793565b9050919050565b6107ce816107b3565b81146107d957600080fd5b50565b6000813590506107eb816107c5565b92915050565b60006020828403121561080757610806610701565b5b6000610815848285016107dc565b91505092915050565b6000819050919050565b600061084361083e61083984610793565b61081e565b610793565b9050919050565b600061085582610828565b9050919050565b60006108678261084a565b9050919050565b6108778161085c565b82525050565b6000602082019050610892600083018461086e565b92915050565b6108a1816107b3565b82525050565b60006020820190506108bc6000830184610898565b92915050565b6000815190506108d181610710565b92915050565b6000602082840312156108ed576108ec610701565b5b60006108fb848285016108c2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061093e82610706565b915061094983610706565b925082820261095781610706565b9150828204841483151761096e5761096d610904565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006109af82610706565b91506109ba83610706565b9250826109ca576109c9610975565b5b828204905092915050565b60006109e082610706565b91506109eb83610706565b9250828201905080821115610a0357610a02610904565b5b92915050565b6000606082019050610a1e6000830186610898565b610a2b6020830185610898565b610a386040830184610769565b949350505050565b60008115159050919050565b610a5581610a40565b8114610a6057600080fd5b50565b600081519050610a7281610a4c565b92915050565b600060208284031215610a8e57610a8d610701565b5b6000610a9c84828501610a63565b91505092915050565b600082825260208201905092915050565b7f4552433230207472616e73666572206661696c65640000000000000000000000600082015250565b6000610aec601583610aa5565b9150610af782610ab6565b602082019050919050565b60006020820190508181036000830152610b1b81610adf565b9050919050565b6000608082019050610b376000830187610898565b610b446020830186610769565b610b516040830185610769565b610b5e6060830184610769565b9594505050505056fea2646970667358221220554c5f4399930e5f603b755c411f10edc5a05e1f816f73b91e8eff7ec8ea8b0864736f6c63430008130033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x86 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8A13EEA7 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x8A13EEA7 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0xA932492F EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0xE0BA2000 EQ PUSH2 0x1A2 JUMPI DUP1 PUSH4 0xEB521A4C EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0xED7BF868 EQ PUSH2 0x1FD JUMPI PUSH2 0x86 JUMP JUMPDEST DUP1 PUSH4 0xA861F2A EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x1CDE6226 EQ PUSH2 0xA7 JUMPI DUP1 PUSH4 0x240F3DEA EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0x6FD0EA92 EQ PUSH2 0x10F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA0 SWAP2 SWAP1 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x23A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBC PUSH2 0x23D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC9 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xF4 SWAP2 SWAP1 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x243 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x106 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x136 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x131 SWAP2 SWAP1 PUSH2 0x7F1 JUMP JUMPDEST PUSH2 0x31C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x143 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x161 PUSH2 0x334 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x87D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x183 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18C PUSH2 0x358 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x199 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B7 PUSH2 0x35E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C4 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1E2 SWAP2 SWAP1 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x3A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F4 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x224 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x21F SWAP2 SWAP1 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x628 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x231 SWAP2 SWAP1 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A5 SWAP2 SWAP1 PUSH2 0x8A7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2E6 SWAP2 SWAP1 PUSH2 0x8D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x2FB JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x317 JUMP JUMPDEST DUP1 DUP5 DUP4 PUSH2 0x308 SWAP2 SWAP1 PUSH2 0x933 JUMP JUMPDEST PUSH2 0x312 SWAP2 SWAP1 PUSH2 0x9A4 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x407 SWAP2 SWAP1 PUSH2 0x8A7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x424 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x448 SWAP2 SWAP1 PUSH2 0x8D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 SLOAD SUB PUSH2 0x45D JUMPI PUSH1 0x64 SWAP3 POP PUSH2 0x479 JUMP JUMPDEST DUP1 DUP5 PUSH1 0x1 SLOAD PUSH2 0x46C SWAP2 SWAP1 PUSH2 0x933 JUMP JUMPDEST PUSH2 0x476 SWAP2 SWAP1 PUSH2 0x9A4 JUMP JUMPDEST SWAP3 POP JUMPDEST DUP3 PUSH1 0x3 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4C8 SWAP2 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x4E1 SWAP2 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x545 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xA09 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x564 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x588 SWAP2 SWAP1 PUSH2 0xA78 JUMP JUMPDEST PUSH2 0x5C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5BE SWAP1 PUSH2 0xB02 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP2 PUSH2 0x5D3 SWAP2 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST DUP3 PUSH2 0x5DE SWAP2 SWAP1 PUSH2 0x933 JUMP JUMPDEST PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH32 0x3BCA7014F4C0CCC8016338C79F4C00E82068DBADAF4F01CA5449040FDD39F500 CALLER DUP6 CALLVALUE DUP7 PUSH1 0x40 MLOAD PUSH2 0x619 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x68A SWAP2 SWAP1 PUSH2 0x8A7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6CB SWAP2 SWAP1 PUSH2 0x8D7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x6E0 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x6FC JUMP JUMPDEST DUP2 DUP5 PUSH2 0x6EC SWAP2 SWAP1 PUSH2 0x9A4 JUMP JUMPDEST DUP2 PUSH2 0x6F7 SWAP2 SWAP1 PUSH2 0x933 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x719 DUP2 PUSH2 0x706 JUMP JUMPDEST DUP2 EQ PUSH2 0x724 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x736 DUP2 PUSH2 0x710 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x752 JUMPI PUSH2 0x751 PUSH2 0x701 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x760 DUP5 DUP3 DUP6 ADD PUSH2 0x727 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x772 DUP2 PUSH2 0x706 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x78D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x769 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7BE DUP3 PUSH2 0x793 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7CE DUP2 PUSH2 0x7B3 JUMP JUMPDEST DUP2 EQ PUSH2 0x7D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x7EB DUP2 PUSH2 0x7C5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x807 JUMPI PUSH2 0x806 PUSH2 0x701 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x815 DUP5 DUP3 DUP6 ADD PUSH2 0x7DC JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x843 PUSH2 0x83E PUSH2 0x839 DUP5 PUSH2 0x793 JUMP JUMPDEST PUSH2 0x81E JUMP JUMPDEST PUSH2 0x793 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x855 DUP3 PUSH2 0x828 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x867 DUP3 PUSH2 0x84A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x877 DUP2 PUSH2 0x85C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x892 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x86E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x8A1 DUP2 PUSH2 0x7B3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8BC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x898 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x8D1 DUP2 PUSH2 0x710 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8ED JUMPI PUSH2 0x8EC PUSH2 0x701 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x8FB DUP5 DUP3 DUP6 ADD PUSH2 0x8C2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x93E DUP3 PUSH2 0x706 JUMP JUMPDEST SWAP2 POP PUSH2 0x949 DUP4 PUSH2 0x706 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 0x957 DUP2 PUSH2 0x706 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 0x96E JUMPI PUSH2 0x96D PUSH2 0x904 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x9AF DUP3 PUSH2 0x706 JUMP JUMPDEST SWAP2 POP PUSH2 0x9BA DUP4 PUSH2 0x706 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x9CA JUMPI PUSH2 0x9C9 PUSH2 0x975 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E0 DUP3 PUSH2 0x706 JUMP JUMPDEST SWAP2 POP PUSH2 0x9EB DUP4 PUSH2 0x706 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0xA03 JUMPI PUSH2 0xA02 PUSH2 0x904 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0xA1E PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x898 JUMP JUMPDEST PUSH2 0xA2B PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x898 JUMP JUMPDEST PUSH2 0xA38 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x769 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xA55 DUP2 PUSH2 0xA40 JUMP JUMPDEST DUP2 EQ PUSH2 0xA60 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xA72 DUP2 PUSH2 0xA4C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA8E JUMPI PUSH2 0xA8D PUSH2 0x701 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xA9C DUP5 DUP3 DUP6 ADD PUSH2 0xA63 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4552433230207472616E73666572206661696C65640000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAEC PUSH1 0x15 DUP4 PUSH2 0xAA5 JUMP JUMPDEST SWAP2 POP PUSH2 0xAF7 DUP3 PUSH2 0xAB6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB1B DUP2 PUSH2 0xADF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0xB37 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x898 JUMP JUMPDEST PUSH2 0xB44 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x769 JUMP JUMPDEST PUSH2 0xB51 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x769 JUMP JUMPDEST PUSH2 0xB5E PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x769 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE 0x4C 0x5F NUMBER SWAP10 SWAP4 0xE 0x5F PUSH1 0x3B PUSH22 0x5C411F10EDC5A05E1F816F73B91E8EFF7EC8EA8B0864 PUSH20 0x6F6C634300081300330000000000000000000000 ",
							"sourceMap": "121:2908:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2678:200;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;174:35;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1403:612;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;254:50;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;145:23;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;215:13;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2554:118;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;402:995;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2021:527;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2678:200;;:::o;174:35::-;;;;:::o;1403:612::-;1478:14;1504:23;1530:21;1504:47;;1561:30;1594:10;;;;;;;;;;;:20;;;1623:4;1594:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1561:68;;1766:1;1737:25;:30;1733:69;;1790:1;1783:8;;;;;;1733:69;1957:25;1937:17;1916:18;:38;;;;:::i;:::-;:66;;;;:::i;:::-;1904:78;;1992:16;;1403:612;;;;:::o;254:50::-;;;;;;;;;;;;;;;;;:::o;145:23::-;;;;;;;;;;;;:::o;215:13::-;;;;:::o;2554:118::-;2612:4;2635:18;:30;2654:10;2635:30;;;;;;;;;;;;;;;;2628:37;;2554:118;:::o;402:995::-;476:14;502:15;520:21;502:39;;551:17;571:10;;;;;;;;;;;:20;;;600:4;571:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;551:55;;647:1;620:23;;:28;616:292;;676:3;664:15;;616:292;;;885:12;865:17;839:23;;:43;;;;:::i;:::-;:58;;;;:::i;:::-;827:70;;616:292;951:9;917:18;:30;936:10;917:30;;;;;;;;;;;;;;;;:43;;;;;;;:::i;:::-;;;;;;;;997:9;970:23;;:36;;;;;;;:::i;:::-;;;;;;;;1087:10;;;;;;;;;;:23;;;1111:10;1131:4;1138:17;1087:69;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1079:103;;;;;;;;;;;;:::i;:::-;;;;;;;;;1225:17;1210:12;:32;;;;:::i;:::-;1196:10;:47;;;;:::i;:::-;1192:1;:51;;;;1258:70;1276:10;1288:17;1307:9;1318;1258:70;;;;;;;;;:::i;:::-;;;;;;;;1374:16;;402:995;;;:::o;2021:527::-;2096:21;2129:23;2155:21;2129:47;;2186:30;2219:10;;;;;;;;;;;:20;;;2248:4;2219:35;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2186:68;;2297:1;2268:25;:30;2264:69;;2321:1;2314:8;;;;;;2264:69;2489:18;2478:10;:29;;;;:::i;:::-;2449:25;:59;;;;:::i;:::-;2430:78;;2518:23;;2021:527;;;;:::o;88:117:6:-;197:1;194;187:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:118::-;1112:24;1130:5;1112:24;:::i;:::-;1107:3;1100:37;1025:118;;:::o;1149:222::-;1242:4;1280:2;1269:9;1265:18;1257:26;;1293:71;1361:1;1350:9;1346:17;1337:6;1293:71;:::i;:::-;1149:222;;;;:::o;1377:126::-;1414:7;1454:42;1447:5;1443:54;1432:65;;1377:126;;;:::o;1509:96::-;1546:7;1575:24;1593:5;1575:24;:::i;:::-;1564:35;;1509:96;;;:::o;1611:122::-;1684:24;1702:5;1684:24;:::i;:::-;1677:5;1674:35;1664:63;;1723:1;1720;1713:12;1664:63;1611:122;:::o;1739:139::-;1785:5;1823:6;1810:20;1801:29;;1839:33;1866:5;1839:33;:::i;:::-;1739:139;;;;:::o;1884:329::-;1943:6;1992:2;1980:9;1971:7;1967:23;1963:32;1960:119;;;1998:79;;:::i;:::-;1960:119;2118:1;2143:53;2188:7;2179:6;2168:9;2164:22;2143:53;:::i;:::-;2133:63;;2089:117;1884:329;;;;:::o;2219:60::-;2247:3;2268:5;2261:12;;2219:60;;;:::o;2285:142::-;2335:9;2368:53;2386:34;2395:24;2413:5;2395:24;:::i;:::-;2386:34;:::i;:::-;2368:53;:::i;:::-;2355:66;;2285:142;;;:::o;2433:126::-;2483:9;2516:37;2547:5;2516:37;:::i;:::-;2503:50;;2433:126;;;:::o;2565:139::-;2628:9;2661:37;2692:5;2661:37;:::i;:::-;2648:50;;2565:139;;;:::o;2710:157::-;2810:50;2854:5;2810:50;:::i;:::-;2805:3;2798:63;2710:157;;:::o;2873:248::-;2979:4;3017:2;3006:9;3002:18;2994:26;;3030:84;3111:1;3100:9;3096:17;3087:6;3030:84;:::i;:::-;2873:248;;;;:::o;3127:118::-;3214:24;3232:5;3214:24;:::i;:::-;3209:3;3202:37;3127:118;;:::o;3251:222::-;3344:4;3382:2;3371:9;3367:18;3359:26;;3395:71;3463:1;3452:9;3448:17;3439:6;3395:71;:::i;:::-;3251:222;;;;:::o;3479:143::-;3536:5;3567:6;3561:13;3552:22;;3583:33;3610:5;3583:33;:::i;:::-;3479:143;;;;:::o;3628:351::-;3698:6;3747:2;3735:9;3726:7;3722:23;3718:32;3715:119;;;3753:79;;:::i;:::-;3715:119;3873:1;3898:64;3954:7;3945:6;3934:9;3930:22;3898:64;:::i;:::-;3888:74;;3844:128;3628:351;;;;:::o;3985:180::-;4033:77;4030:1;4023:88;4130:4;4127:1;4120:15;4154:4;4151:1;4144:15;4171:410;4211:7;4234:20;4252:1;4234:20;:::i;:::-;4229:25;;4268:20;4286:1;4268:20;:::i;:::-;4263:25;;4323:1;4320;4316:9;4345:30;4363:11;4345:30;:::i;:::-;4334:41;;4524:1;4515:7;4511:15;4508:1;4505:22;4485:1;4478:9;4458:83;4435:139;;4554:18;;:::i;:::-;4435:139;4219:362;4171:410;;;;:::o;4587:180::-;4635:77;4632:1;4625:88;4732:4;4729:1;4722:15;4756:4;4753:1;4746:15;4773:185;4813:1;4830:20;4848:1;4830:20;:::i;:::-;4825:25;;4864:20;4882:1;4864:20;:::i;:::-;4859:25;;4903:1;4893:35;;4908:18;;:::i;:::-;4893:35;4950:1;4947;4943:9;4938:14;;4773:185;;;;:::o;4964:191::-;5004:3;5023:20;5041:1;5023:20;:::i;:::-;5018:25;;5057:20;5075:1;5057:20;:::i;:::-;5052:25;;5100:1;5097;5093:9;5086:16;;5121:3;5118:1;5115:10;5112:36;;;5128:18;;:::i;:::-;5112:36;4964:191;;;;:::o;5161:442::-;5310:4;5348:2;5337:9;5333:18;5325:26;;5361:71;5429:1;5418:9;5414:17;5405:6;5361:71;:::i;:::-;5442:72;5510:2;5499:9;5495:18;5486:6;5442:72;:::i;:::-;5524;5592:2;5581:9;5577:18;5568:6;5524:72;:::i;:::-;5161:442;;;;;;:::o;5609:90::-;5643:7;5686:5;5679:13;5672:21;5661:32;;5609:90;;;:::o;5705:116::-;5775:21;5790:5;5775:21;:::i;:::-;5768:5;5765:32;5755:60;;5811:1;5808;5801:12;5755:60;5705:116;:::o;5827:137::-;5881:5;5912:6;5906:13;5897:22;;5928:30;5952:5;5928:30;:::i;:::-;5827:137;;;;:::o;5970:345::-;6037:6;6086:2;6074:9;6065:7;6061:23;6057:32;6054:119;;;6092:79;;:::i;:::-;6054:119;6212:1;6237:61;6290:7;6281:6;6270:9;6266:22;6237:61;:::i;:::-;6227:71;;6183:125;5970:345;;;;:::o;6321:169::-;6405:11;6439:6;6434:3;6427:19;6479:4;6474:3;6470:14;6455:29;;6321:169;;;;:::o;6496:171::-;6636:23;6632:1;6624:6;6620:14;6613:47;6496:171;:::o;6673:366::-;6815:3;6836:67;6900:2;6895:3;6836:67;:::i;:::-;6829:74;;6912:93;7001:3;6912:93;:::i;:::-;7030:2;7025:3;7021:12;7014:19;;6673:366;;;:::o;7045:419::-;7211:4;7249:2;7238:9;7234:18;7226:26;;7298:9;7292:4;7288:20;7284:1;7273:9;7269:17;7262:47;7326:131;7452:4;7326:131;:::i;:::-;7318:139;;7045:419;;;:::o;7470:553::-;7647:4;7685:3;7674:9;7670:19;7662:27;;7699:71;7767:1;7756:9;7752:17;7743:6;7699:71;:::i;:::-;7780:72;7848:2;7837:9;7833:18;7824:6;7780:72;:::i;:::-;7862;7930:2;7919:9;7915:18;7906:6;7862:72;:::i;:::-;7944;8012:2;8001:9;7997:18;7988:6;7944:72;:::i;:::-;7470:553;;;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "594600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"K()": "2451",
								"erc20Token()": "infinite",
								"estimateERC20TokenToProvide(uint256)": "infinite",
								"estimateEthToProvide(uint256)": "infinite",
								"getMyLiquidityPositions()": "2570",
								"liquidityPositions(address)": "2881",
								"provideLiquidity(uint256)": "infinite",
								"totalLiquidityPositions()": "2452",
								"withdrawLiquidity(uint256)": "383"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 121,
									"end": 3029,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 311,
									"end": 396,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 311,
									"end": 396,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 311,
									"end": 396,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 311,
									"end": 396,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "CODESIZE",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "SUB",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "PUSHSIZE",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 311,
									"end": 396,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 311,
									"end": 396,
									"name": "SWAP2",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "3"
								},
								{
									"begin": 311,
									"end": 396,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "tag",
									"source": 5,
									"value": "2"
								},
								{
									"begin": 311,
									"end": 396,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 375,
									"end": 388,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 356,
									"end": 366,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "PUSH",
									"source": 5,
									"value": "100"
								},
								{
									"begin": 356,
									"end": 389,
									"name": "EXP",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "SLOAD",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 356,
									"end": 389,
									"name": "MUL",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "NOT",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "DUP4",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "PUSH",
									"source": 5,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 356,
									"end": 389,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "MUL",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "OR",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "SSTORE",
									"source": 5
								},
								{
									"begin": 356,
									"end": 389,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 311,
									"end": 396,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "6"
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 6,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 6
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "10"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 6,
									"value": "12"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "22"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 6,
									"value": "22"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "23"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 6,
									"value": "23"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 6,
									"value": "13"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "25"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "12"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 6,
									"value": "25"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 6,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 6
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 6
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 6
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "27"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "28"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "8"
								},
								{
									"begin": 970,
									"end": 1049,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 6,
									"value": "28"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 6,
									"value": "27"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "29"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 6
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 6
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "13"
								},
								{
									"begin": 1115,
									"end": 1179,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 6,
									"value": "29"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 845,
									"end": 1196,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 6
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "tag",
									"source": 5,
									"value": "6"
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 121,
									"end": 3029,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220554c5f4399930e5f603b755c411f10edc5a05e1f816f73b91e8eff7ec8ea8b0864736f6c63430008130033",
									".code": [
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "LT",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "CALLDATALOAD",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "SHR",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "8A13EEA7"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "8A13EEA7"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "A932492F"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "E0BA2000"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "EB521A4C"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "ED7BF868"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "A861F2A"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "1CDE6226"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "240F3DEA"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "6FD0EA92"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "tag",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 121,
											"end": 3029,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "tag",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 2678,
											"end": 2878,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "tag",
											"source": 5,
											"value": "13"
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 2678,
											"end": 2878,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "tag",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 174,
											"end": 209,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "tag",
											"source": 5,
											"value": "17"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 174,
											"end": 209,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "tag",
											"source": 5,
											"value": "19"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "tag",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "tag",
											"source": 5,
											"value": "21"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 1403,
											"end": 2015,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1403,
											"end": 2015,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "tag",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1403,
											"end": 2015,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "tag",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "tag",
											"source": 5,
											"value": "5"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "tag",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "29"
										},
										{
											"begin": 254,
											"end": 304,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "tag",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 254,
											"end": 304,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "tag",
											"source": 5,
											"value": "27"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 254,
											"end": 304,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "tag",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "tag",
											"source": 5,
											"value": "6"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "tag",
											"source": 5,
											"value": "32"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "33"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 145,
											"end": 168,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "tag",
											"source": 5,
											"value": "33"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "36"
										},
										{
											"begin": 145,
											"end": 168,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "tag",
											"source": 5,
											"value": "35"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "tag",
											"source": 5,
											"value": "37"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "38"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 215,
											"end": 228,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "tag",
											"source": 5,
											"value": "38"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 215,
											"end": 228,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "tag",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "41"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "tag",
											"source": 5,
											"value": "41"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "42"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 2554,
											"end": 2672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "tag",
											"source": 5,
											"value": "42"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2554,
											"end": 2672,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "tag",
											"source": 5,
											"value": "44"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 402,
											"end": 1397,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "tag",
											"source": 5,
											"value": "46"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 402,
											"end": 1397,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "tag",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 402,
											"end": 1397,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "tag",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "49"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "tag",
											"source": 5,
											"value": "49"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "50"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "14"
										},
										{
											"begin": 2021,
											"end": 2548,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "tag",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "52"
										},
										{
											"begin": 2021,
											"end": 2548,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "tag",
											"source": 5,
											"value": "50"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2021,
											"end": 2548,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "tag",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "RETURN",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2678,
											"end": 2878,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "tag",
											"source": 5,
											"value": "18"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 174,
											"end": 209,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 174,
											"end": 209,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "tag",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1478,
											"end": 1492,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1504,
											"end": 1527,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1530,
											"end": 1551,
											"name": "SELFBALANCE",
											"source": 5
										},
										{
											"begin": 1504,
											"end": 1551,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1504,
											"end": 1551,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1561,
											"end": 1591,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1594,
											"end": 1604,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1614,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1594,
											"end": 1614,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1614,
											"name": "PUSH",
											"source": 5,
											"value": "70A08231"
										},
										{
											"begin": 1623,
											"end": 1627,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 1594,
											"end": 1629,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "tag",
											"source": 5,
											"value": "56"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "STATICCALL",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "tag",
											"source": 5,
											"value": "59"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 1594,
											"end": 1629,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "tag",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 1594,
											"end": 1629,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1561,
											"end": 1629,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1561,
											"end": 1629,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1766,
											"end": 1767,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1737,
											"end": 1762,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1737,
											"end": 1767,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1733,
											"end": 1802,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 1733,
											"end": 1802,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1790,
											"end": 1791,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1783,
											"end": 1791,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1783,
											"end": 1791,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1783,
											"end": 1791,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1783,
											"end": 1791,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1783,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 1783,
											"end": 1791,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1733,
											"end": 1802,
											"name": "tag",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 1733,
											"end": 1802,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1957,
											"end": 1982,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1937,
											"end": 1954,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1916,
											"end": 1934,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1916,
											"end": 1954,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 1916,
											"end": 1954,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1916,
											"end": 1954,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1916,
											"end": 1954,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1916,
											"end": 1954,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1916,
											"end": 1954,
											"name": "tag",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 1916,
											"end": 1954,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1916,
											"end": 1982,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 1916,
											"end": 1982,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1916,
											"end": 1982,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1916,
											"end": 1982,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 1916,
											"end": 1982,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1916,
											"end": 1982,
											"name": "tag",
											"source": 5,
											"value": "65"
										},
										{
											"begin": 1916,
											"end": 1982,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1904,
											"end": 1982,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1904,
											"end": 1982,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1992,
											"end": 2008,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1992,
											"end": 2008,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "tag",
											"source": 5,
											"value": "55"
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1403,
											"end": 2015,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "tag",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 254,
											"end": 304,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "tag",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 145,
											"end": 168,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 145,
											"end": 168,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "tag",
											"source": 5,
											"value": "39"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 215,
											"end": 228,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 215,
											"end": 228,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "tag",
											"source": 5,
											"value": "43"
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2612,
											"end": 2616,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2635,
											"end": 2653,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2654,
											"end": 2664,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 2635,
											"end": 2665,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2628,
											"end": 2665,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2628,
											"end": 2665,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2554,
											"end": 2672,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "tag",
											"source": 5,
											"value": "47"
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 476,
											"end": 490,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 502,
											"end": 517,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 520,
											"end": 541,
											"name": "SELFBALANCE",
											"source": 5
										},
										{
											"begin": 502,
											"end": 541,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 502,
											"end": 541,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 551,
											"end": 568,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 571,
											"end": 581,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 581,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 571,
											"end": 581,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 581,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 571,
											"end": 581,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 581,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 571,
											"end": 581,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 571,
											"end": 581,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 581,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 571,
											"end": 581,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 571,
											"end": 581,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 571,
											"end": 591,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 571,
											"end": 591,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 571,
											"end": 591,
											"name": "PUSH",
											"source": 5,
											"value": "70A08231"
										},
										{
											"begin": 600,
											"end": 604,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 571,
											"end": 606,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "tag",
											"source": 5,
											"value": "69"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "STATICCALL",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "tag",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 571,
											"end": 606,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 571,
											"end": 606,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 571,
											"end": 606,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 551,
											"end": 606,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 551,
											"end": 606,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 647,
											"end": 648,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 620,
											"end": 643,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 620,
											"end": 643,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 620,
											"end": 648,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 616,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 616,
											"end": 908,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 676,
											"end": 679,
											"name": "PUSH",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 664,
											"end": 679,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 664,
											"end": 679,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 616,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 616,
											"end": 908,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 616,
											"end": 908,
											"name": "tag",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 616,
											"end": 908,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 885,
											"end": 897,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 865,
											"end": 882,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 839,
											"end": 862,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 839,
											"end": 862,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 839,
											"end": 882,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 839,
											"end": 882,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 839,
											"end": 882,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 839,
											"end": 882,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 839,
											"end": 882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 839,
											"end": 882,
											"name": "tag",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 839,
											"end": 882,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 839,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 839,
											"end": 897,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 839,
											"end": 897,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 839,
											"end": 897,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 839,
											"end": 897,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 839,
											"end": 897,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 839,
											"end": 897,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 827,
											"end": 897,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 827,
											"end": 897,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 616,
											"end": 908,
											"name": "tag",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 616,
											"end": 908,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 951,
											"end": 960,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 917,
											"end": 935,
											"name": "PUSH",
											"source": 5,
											"value": "3"
										},
										{
											"begin": 917,
											"end": 947,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 946,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 917,
											"end": 947,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 917,
											"end": 947,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 917,
											"end": 947,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 917,
											"end": 947,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 917,
											"end": 947,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 917,
											"end": 947,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 917,
											"end": 960,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 917,
											"end": 960,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 917,
											"end": 960,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "tag",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 917,
											"end": 960,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 917,
											"end": 960,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 997,
											"end": 1006,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 970,
											"end": 993,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 970,
											"end": 993,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 970,
											"end": 1006,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "tag",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 970,
											"end": 1006,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1097,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1087,
											"end": 1097,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1097,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1097,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1097,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 1087,
											"end": 1097,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1097,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1097,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1097,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1087,
											"end": 1097,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1110,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1087,
											"end": 1110,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1110,
											"name": "PUSH",
											"source": 5,
											"value": "23B872DD"
										},
										{
											"begin": 1111,
											"end": 1121,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1131,
											"end": 1135,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 1138,
											"end": 1155,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 1087,
											"end": 1156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "tag",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "CALL",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "83"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "tag",
											"source": 5,
											"value": "83"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "85"
										},
										{
											"begin": 1087,
											"end": 1156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "tag",
											"source": 5,
											"value": "84"
										},
										{
											"begin": 1087,
											"end": 1156,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "PUSH",
											"source": 5,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "88"
										},
										{
											"begin": 1079,
											"end": 1182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "tag",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "tag",
											"source": 5,
											"value": "86"
										},
										{
											"begin": 1079,
											"end": 1182,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1225,
											"end": 1242,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1210,
											"end": 1222,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1210,
											"end": 1242,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "89"
										},
										{
											"begin": 1210,
											"end": 1242,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1210,
											"end": 1242,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1210,
											"end": 1242,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 1210,
											"end": 1242,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1210,
											"end": 1242,
											"name": "tag",
											"source": 5,
											"value": "89"
										},
										{
											"begin": 1210,
											"end": 1242,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1196,
											"end": 1206,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1196,
											"end": 1243,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 1196,
											"end": 1243,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1196,
											"end": 1243,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1196,
											"end": 1243,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1196,
											"end": 1243,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1196,
											"end": 1243,
											"name": "tag",
											"source": 5,
											"value": "90"
										},
										{
											"begin": 1196,
											"end": 1243,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1192,
											"end": 1193,
											"name": "PUSH",
											"source": 5,
											"value": "2"
										},
										{
											"begin": 1192,
											"end": 1243,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1192,
											"end": 1243,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1192,
											"end": 1243,
											"name": "SSTORE",
											"source": 5
										},
										{
											"begin": 1192,
											"end": 1243,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "PUSH",
											"source": 5,
											"value": "3BCA7014F4C0CCC8016338C79F4C00E82068DBADAF4F01CA5449040FDD39F500"
										},
										{
											"begin": 1276,
											"end": 1286,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 1288,
											"end": 1305,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 1307,
											"end": 1316,
											"name": "CALLVALUE",
											"source": 5
										},
										{
											"begin": 1318,
											"end": 1327,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "92"
										},
										{
											"begin": 1258,
											"end": 1328,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "tag",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1258,
											"end": 1328,
											"name": "LOG1",
											"source": 5
										},
										{
											"begin": 1374,
											"end": 1390,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1374,
											"end": 1390,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 402,
											"end": 1397,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "tag",
											"source": 5,
											"value": "52"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2096,
											"end": 2117,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2129,
											"end": 2152,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2155,
											"end": 2176,
											"name": "SELFBALANCE",
											"source": 5
										},
										{
											"begin": 2129,
											"end": 2176,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2129,
											"end": 2176,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2186,
											"end": 2216,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "SLOAD",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "PUSH",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "EXP",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "DIV",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2219,
											"end": 2229,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2239,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2219,
											"end": 2239,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2239,
											"name": "PUSH",
											"source": 5,
											"value": "70A08231"
										},
										{
											"begin": 2248,
											"end": 2252,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "FFFFFFFF"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "94"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 2219,
											"end": 2254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "tag",
											"source": 5,
											"value": "94"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "STATICCALL",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "RETURNDATACOPY",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "tag",
											"source": 5,
											"value": "96"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 2219,
											"end": 2254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "tag",
											"source": 5,
											"value": "97"
										},
										{
											"begin": 2219,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2186,
											"end": 2254,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2186,
											"end": 2254,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2297,
											"end": 2298,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2268,
											"end": 2293,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2268,
											"end": 2298,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2264,
											"end": 2333,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 2264,
											"end": 2333,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2321,
											"end": 2322,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2264,
											"end": 2333,
											"name": "tag",
											"source": 5,
											"value": "98"
										},
										{
											"begin": 2264,
											"end": 2333,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2489,
											"end": 2507,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2478,
											"end": 2488,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 2478,
											"end": 2507,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 2478,
											"end": 2507,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2478,
											"end": 2507,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2478,
											"end": 2507,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 2478,
											"end": 2507,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2478,
											"end": 2507,
											"name": "tag",
											"source": 5,
											"value": "99"
										},
										{
											"begin": 2478,
											"end": 2507,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2449,
											"end": 2474,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2449,
											"end": 2508,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 2449,
											"end": 2508,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2449,
											"end": 2508,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2449,
											"end": 2508,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 2449,
											"end": 2508,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2449,
											"end": 2508,
											"name": "tag",
											"source": 5,
											"value": "100"
										},
										{
											"begin": 2449,
											"end": 2508,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2430,
											"end": 2508,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 2430,
											"end": 2508,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2518,
											"end": 2541,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2518,
											"end": 2541,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "tag",
											"source": 5,
											"value": "93"
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2021,
											"end": 2548,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 334,
											"end": 411,
											"name": "tag",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 334,
											"end": 411,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 400,
											"end": 405,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 389,
											"end": 405,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 389,
											"end": 405,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 334,
											"end": 411,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 334,
											"end": 411,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 334,
											"end": 411,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 334,
											"end": 411,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 417,
											"end": 539,
											"name": "tag",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 417,
											"end": 539,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 490,
											"end": 514,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 508,
											"end": 513,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 490,
											"end": 514,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 490,
											"end": 514,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 490,
											"end": 514,
											"name": "tag",
											"source": 6,
											"value": "133"
										},
										{
											"begin": 490,
											"end": 514,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 483,
											"end": 488,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 480,
											"end": 515,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 470,
											"end": 533,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 470,
											"end": 533,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 529,
											"end": 530,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 526,
											"end": 527,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 519,
											"end": 531,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 470,
											"end": 533,
											"name": "tag",
											"source": 6,
											"value": "134"
										},
										{
											"begin": 470,
											"end": 533,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 417,
											"end": 539,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 417,
											"end": 539,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 545,
											"end": 684,
											"name": "tag",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 545,
											"end": 684,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 591,
											"end": 596,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 629,
											"end": 635,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 616,
											"end": 636,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 607,
											"end": 636,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 607,
											"end": 636,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 645,
											"end": 678,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 672,
											"end": 677,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 645,
											"end": 678,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 645,
											"end": 678,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 645,
											"end": 678,
											"name": "tag",
											"source": 6,
											"value": "136"
										},
										{
											"begin": 645,
											"end": 678,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 545,
											"end": 684,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 545,
											"end": 684,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 545,
											"end": 684,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 545,
											"end": 684,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 545,
											"end": 684,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 690,
											"end": 1019,
											"name": "tag",
											"source": 6,
											"value": "14"
										},
										{
											"begin": 690,
											"end": 1019,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 749,
											"end": 755,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 798,
											"end": 800,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 786,
											"end": 795,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 777,
											"end": 784,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 773,
											"end": 796,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 769,
											"end": 801,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 766,
											"end": 885,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 766,
											"end": 885,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 766,
											"end": 885,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 804,
											"end": 883,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 804,
											"end": 883,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 804,
											"end": 883,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 804,
											"end": 883,
											"name": "tag",
											"source": 6,
											"value": "139"
										},
										{
											"begin": 804,
											"end": 883,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 766,
											"end": 885,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 766,
											"end": 885,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 924,
											"end": 925,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 949,
											"end": 1002,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 994,
											"end": 1001,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 985,
											"end": 991,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 974,
											"end": 983,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 970,
											"end": 992,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 949,
											"end": 1002,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "106"
										},
										{
											"begin": 949,
											"end": 1002,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 949,
											"end": 1002,
											"name": "tag",
											"source": 6,
											"value": "140"
										},
										{
											"begin": 949,
											"end": 1002,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 939,
											"end": 1002,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 939,
											"end": 1002,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 895,
											"end": 1012,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 690,
											"end": 1019,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 690,
											"end": 1019,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 690,
											"end": 1019,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 690,
											"end": 1019,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 690,
											"end": 1019,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1025,
											"end": 1143,
											"name": "tag",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 1025,
											"end": 1143,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1136,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 1130,
											"end": 1135,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1136,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 1112,
											"end": 1136,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1136,
											"name": "tag",
											"source": 6,
											"value": "142"
										},
										{
											"begin": 1112,
											"end": 1136,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1107,
											"end": 1110,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1100,
											"end": 1137,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1025,
											"end": 1143,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1025,
											"end": 1143,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1025,
											"end": 1143,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1149,
											"end": 1371,
											"name": "tag",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1149,
											"end": 1371,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1242,
											"end": 1246,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1280,
											"end": 1282,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1269,
											"end": 1278,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1265,
											"end": 1283,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1257,
											"end": 1283,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1257,
											"end": 1283,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1293,
											"end": 1364,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 1361,
											"end": 1362,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1350,
											"end": 1359,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1346,
											"end": 1363,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1337,
											"end": 1343,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1293,
											"end": 1364,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 1293,
											"end": 1364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1293,
											"end": 1364,
											"name": "tag",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 1293,
											"end": 1364,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1149,
											"end": 1371,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1149,
											"end": 1371,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1149,
											"end": 1371,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1149,
											"end": 1371,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1149,
											"end": 1371,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1377,
											"end": 1503,
											"name": "tag",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 1377,
											"end": 1503,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1414,
											"end": 1421,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1454,
											"end": 1496,
											"name": "PUSH",
											"source": 6,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1447,
											"end": 1452,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1443,
											"end": 1497,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1432,
											"end": 1497,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1432,
											"end": 1497,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1377,
											"end": 1503,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1377,
											"end": 1503,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1377,
											"end": 1503,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1377,
											"end": 1503,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1509,
											"end": 1605,
											"name": "tag",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 1509,
											"end": 1605,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1546,
											"end": 1553,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1575,
											"end": 1599,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 1593,
											"end": 1598,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1575,
											"end": 1599,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 1575,
											"end": 1599,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1575,
											"end": 1599,
											"name": "tag",
											"source": 6,
											"value": "147"
										},
										{
											"begin": 1575,
											"end": 1599,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1564,
											"end": 1599,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1564,
											"end": 1599,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1509,
											"end": 1605,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1509,
											"end": 1605,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1509,
											"end": 1605,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1509,
											"end": 1605,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1611,
											"end": 1733,
											"name": "tag",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 1611,
											"end": 1733,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 1702,
											"end": 1707,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1708,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 1684,
											"end": 1708,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1708,
											"name": "tag",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 1684,
											"end": 1708,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1677,
											"end": 1682,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1674,
											"end": 1709,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1664,
											"end": 1727,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 1664,
											"end": 1727,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1723,
											"end": 1724,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1720,
											"end": 1721,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1713,
											"end": 1725,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1664,
											"end": 1727,
											"name": "tag",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 1664,
											"end": 1727,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1611,
											"end": 1733,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1611,
											"end": 1733,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "tag",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1785,
											"end": 1790,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1823,
											"end": 1829,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 1801,
											"end": 1830,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1801,
											"end": 1830,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1839,
											"end": 1872,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 1866,
											"end": 1871,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1839,
											"end": 1872,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "110"
										},
										{
											"begin": 1839,
											"end": 1872,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1839,
											"end": 1872,
											"name": "tag",
											"source": 6,
											"value": "152"
										},
										{
											"begin": 1839,
											"end": 1872,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1739,
											"end": 1878,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1739,
											"end": 1878,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1884,
											"end": 2213,
											"name": "tag",
											"source": 6,
											"value": "29"
										},
										{
											"begin": 1884,
											"end": 2213,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1943,
											"end": 1949,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1992,
											"end": 1994,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1980,
											"end": 1989,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1971,
											"end": 1978,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1967,
											"end": 1990,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1963,
											"end": 1995,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 1960,
											"end": 2079,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1960,
											"end": 2079,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 1960,
											"end": 2079,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1998,
											"end": 2077,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 1998,
											"end": 2077,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 1998,
											"end": 2077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1998,
											"end": 2077,
											"name": "tag",
											"source": 6,
											"value": "155"
										},
										{
											"begin": 1998,
											"end": 2077,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1960,
											"end": 2079,
											"name": "tag",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 1960,
											"end": 2079,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2118,
											"end": 2119,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2143,
											"end": 2196,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 2188,
											"end": 2195,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2179,
											"end": 2185,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2168,
											"end": 2177,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 2164,
											"end": 2186,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2143,
											"end": 2196,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "111"
										},
										{
											"begin": 2143,
											"end": 2196,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2143,
											"end": 2196,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 2143,
											"end": 2196,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2133,
											"end": 2196,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2133,
											"end": 2196,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2089,
											"end": 2206,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1884,
											"end": 2213,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1884,
											"end": 2213,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1884,
											"end": 2213,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1884,
											"end": 2213,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1884,
											"end": 2213,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2219,
											"end": 2279,
											"name": "tag",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 2219,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2247,
											"end": 2250,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2268,
											"end": 2273,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2261,
											"end": 2273,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2261,
											"end": 2273,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2219,
											"end": 2279,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2219,
											"end": 2279,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2219,
											"end": 2279,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2219,
											"end": 2279,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2285,
											"end": 2427,
											"name": "tag",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 2285,
											"end": 2427,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2335,
											"end": 2344,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2368,
											"end": 2421,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 2386,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 2395,
											"end": 2419,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 2413,
											"end": 2418,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2395,
											"end": 2419,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 2395,
											"end": 2419,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2395,
											"end": 2419,
											"name": "tag",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 2395,
											"end": 2419,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2386,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "112"
										},
										{
											"begin": 2386,
											"end": 2420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2386,
											"end": 2420,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 2386,
											"end": 2420,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2368,
											"end": 2421,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "108"
										},
										{
											"begin": 2368,
											"end": 2421,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2368,
											"end": 2421,
											"name": "tag",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 2368,
											"end": 2421,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2355,
											"end": 2421,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2355,
											"end": 2421,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2285,
											"end": 2427,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2285,
											"end": 2427,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2285,
											"end": 2427,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2285,
											"end": 2427,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2433,
											"end": 2559,
											"name": "tag",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 2433,
											"end": 2559,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2483,
											"end": 2492,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2516,
											"end": 2553,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 2547,
											"end": 2552,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2516,
											"end": 2553,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "113"
										},
										{
											"begin": 2516,
											"end": 2553,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2516,
											"end": 2553,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 2516,
											"end": 2553,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2503,
											"end": 2553,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2503,
											"end": 2553,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2433,
											"end": 2559,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2433,
											"end": 2559,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2433,
											"end": 2559,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2433,
											"end": 2559,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2565,
											"end": 2704,
											"name": "tag",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 2565,
											"end": 2704,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2628,
											"end": 2637,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2661,
											"end": 2698,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 2692,
											"end": 2697,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2661,
											"end": 2698,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "114"
										},
										{
											"begin": 2661,
											"end": 2698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2661,
											"end": 2698,
											"name": "tag",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 2661,
											"end": 2698,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2648,
											"end": 2698,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2648,
											"end": 2698,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2565,
											"end": 2704,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2565,
											"end": 2704,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2565,
											"end": 2704,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2565,
											"end": 2704,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2867,
											"name": "tag",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 2710,
											"end": 2867,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2810,
											"end": 2860,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 2854,
											"end": 2859,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2810,
											"end": 2860,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "115"
										},
										{
											"begin": 2810,
											"end": 2860,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2810,
											"end": 2860,
											"name": "tag",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 2810,
											"end": 2860,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2805,
											"end": 2808,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2798,
											"end": 2861,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2867,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2867,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2710,
											"end": 2867,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2873,
											"end": 3121,
											"name": "tag",
											"source": 6,
											"value": "36"
										},
										{
											"begin": 2873,
											"end": 3121,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2979,
											"end": 2983,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3017,
											"end": 3019,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3006,
											"end": 3015,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3002,
											"end": 3020,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2994,
											"end": 3020,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2994,
											"end": 3020,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3030,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 3111,
											"end": 3112,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3100,
											"end": 3109,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3096,
											"end": 3113,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3087,
											"end": 3093,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3030,
											"end": 3114,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "116"
										},
										{
											"begin": 3030,
											"end": 3114,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3030,
											"end": 3114,
											"name": "tag",
											"source": 6,
											"value": "169"
										},
										{
											"begin": 3030,
											"end": 3114,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2873,
											"end": 3121,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 2873,
											"end": 3121,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 2873,
											"end": 3121,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2873,
											"end": 3121,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2873,
											"end": 3121,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3127,
											"end": 3245,
											"name": "tag",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 3127,
											"end": 3245,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3214,
											"end": 3238,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "171"
										},
										{
											"begin": 3232,
											"end": 3237,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3214,
											"end": 3238,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "109"
										},
										{
											"begin": 3214,
											"end": 3238,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3214,
											"end": 3238,
											"name": "tag",
											"source": 6,
											"value": "171"
										},
										{
											"begin": 3214,
											"end": 3238,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3209,
											"end": 3212,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3202,
											"end": 3239,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 3127,
											"end": 3245,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3127,
											"end": 3245,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3127,
											"end": 3245,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3251,
											"end": 3473,
											"name": "tag",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 3251,
											"end": 3473,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3344,
											"end": 3348,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3382,
											"end": 3384,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3371,
											"end": 3380,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3367,
											"end": 3385,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3359,
											"end": 3385,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3359,
											"end": 3385,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3395,
											"end": 3466,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 3463,
											"end": 3464,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3452,
											"end": 3461,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 3448,
											"end": 3465,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3439,
											"end": 3445,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3395,
											"end": 3466,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 3395,
											"end": 3466,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3395,
											"end": 3466,
											"name": "tag",
											"source": 6,
											"value": "173"
										},
										{
											"begin": 3395,
											"end": 3466,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3251,
											"end": 3473,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3251,
											"end": 3473,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3251,
											"end": 3473,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3251,
											"end": 3473,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3251,
											"end": 3473,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3479,
											"end": 3622,
											"name": "tag",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 3479,
											"end": 3622,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3536,
											"end": 3541,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3567,
											"end": 3573,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3561,
											"end": 3574,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3552,
											"end": 3574,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 3552,
											"end": 3574,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3583,
											"end": 3616,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 3610,
											"end": 3615,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3583,
											"end": 3616,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "105"
										},
										{
											"begin": 3583,
											"end": 3616,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3583,
											"end": 3616,
											"name": "tag",
											"source": 6,
											"value": "175"
										},
										{
											"begin": 3583,
											"end": 3616,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3479,
											"end": 3622,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3479,
											"end": 3622,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3479,
											"end": 3622,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3479,
											"end": 3622,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3479,
											"end": 3622,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3628,
											"end": 3979,
											"name": "tag",
											"source": 6,
											"value": "61"
										},
										{
											"begin": 3628,
											"end": 3979,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3698,
											"end": 3704,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3747,
											"end": 3749,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3735,
											"end": 3744,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3726,
											"end": 3733,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3722,
											"end": 3745,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 3718,
											"end": 3750,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 3715,
											"end": 3834,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 3715,
											"end": 3834,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 3715,
											"end": 3834,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 3753,
											"end": 3832,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 3753,
											"end": 3832,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 3753,
											"end": 3832,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3753,
											"end": 3832,
											"name": "tag",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 3753,
											"end": 3832,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3715,
											"end": 3834,
											"name": "tag",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 3715,
											"end": 3834,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3873,
											"end": 3874,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3898,
											"end": 3962,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 3954,
											"end": 3961,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3945,
											"end": 3951,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3934,
											"end": 3943,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 3930,
											"end": 3952,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3898,
											"end": 3962,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 3898,
											"end": 3962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3898,
											"end": 3962,
											"name": "tag",
											"source": 6,
											"value": "179"
										},
										{
											"begin": 3898,
											"end": 3962,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3962,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3888,
											"end": 3962,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3844,
											"end": 3972,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3628,
											"end": 3979,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 3628,
											"end": 3979,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3628,
											"end": 3979,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3628,
											"end": 3979,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 3628,
											"end": 3979,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3985,
											"end": 4165,
											"name": "tag",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 3985,
											"end": 4165,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4033,
											"end": 4110,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4030,
											"end": 4031,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4023,
											"end": 4111,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4130,
											"end": 4134,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 4127,
											"end": 4128,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4120,
											"end": 4135,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4154,
											"end": 4158,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 4151,
											"end": 4152,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4144,
											"end": 4159,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4171,
											"end": 4581,
											"name": "tag",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 4171,
											"end": 4581,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4211,
											"end": 4218,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4234,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "182"
										},
										{
											"begin": 4252,
											"end": 4253,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4234,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 4234,
											"end": 4254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4234,
											"end": 4254,
											"name": "tag",
											"source": 6,
											"value": "182"
										},
										{
											"begin": 4234,
											"end": 4254,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4229,
											"end": 4254,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4229,
											"end": 4254,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4268,
											"end": 4288,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "183"
										},
										{
											"begin": 4286,
											"end": 4287,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4268,
											"end": 4288,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 4268,
											"end": 4288,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4268,
											"end": 4288,
											"name": "tag",
											"source": 6,
											"value": "183"
										},
										{
											"begin": 4268,
											"end": 4288,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4263,
											"end": 4288,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4263,
											"end": 4288,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4323,
											"end": 4324,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4320,
											"end": 4321,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4316,
											"end": 4325,
											"name": "MUL",
											"source": 6
										},
										{
											"begin": 4345,
											"end": 4375,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 4363,
											"end": 4374,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4345,
											"end": 4375,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 4345,
											"end": 4375,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4345,
											"end": 4375,
											"name": "tag",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 4345,
											"end": 4375,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4334,
											"end": 4375,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4334,
											"end": 4375,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4524,
											"end": 4525,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4515,
											"end": 4522,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4511,
											"end": 4526,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 4508,
											"end": 4509,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 4505,
											"end": 4527,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 4485,
											"end": 4486,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4478,
											"end": 4487,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 4458,
											"end": 4541,
											"name": "OR",
											"source": 6
										},
										{
											"begin": 4435,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 4435,
											"end": 4574,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4554,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 4554,
											"end": 4572,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 4554,
											"end": 4572,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4554,
											"end": 4572,
											"name": "tag",
											"source": 6,
											"value": "186"
										},
										{
											"begin": 4554,
											"end": 4572,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4435,
											"end": 4574,
											"name": "tag",
											"source": 6,
											"value": "185"
										},
										{
											"begin": 4435,
											"end": 4574,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4219,
											"end": 4581,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4171,
											"end": 4581,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4171,
											"end": 4581,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4171,
											"end": 4581,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4171,
											"end": 4581,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4171,
											"end": 4581,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4587,
											"end": 4767,
											"name": "tag",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 4587,
											"end": 4767,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4635,
											"end": 4712,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 4632,
											"end": 4633,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4625,
											"end": 4713,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4732,
											"end": 4736,
											"name": "PUSH",
											"source": 6,
											"value": "12"
										},
										{
											"begin": 4729,
											"end": 4730,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 4722,
											"end": 4737,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 4756,
											"end": 4760,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 4753,
											"end": 4754,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4746,
											"end": 4761,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4773,
											"end": 4958,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 4773,
											"end": 4958,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4813,
											"end": 4814,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 4830,
											"end": 4850,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 4848,
											"end": 4849,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4830,
											"end": 4850,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 4830,
											"end": 4850,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4830,
											"end": 4850,
											"name": "tag",
											"source": 6,
											"value": "189"
										},
										{
											"begin": 4830,
											"end": 4850,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4825,
											"end": 4850,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4825,
											"end": 4850,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4864,
											"end": 4884,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 4882,
											"end": 4883,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 4864,
											"end": 4884,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 4864,
											"end": 4884,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4864,
											"end": 4884,
											"name": "tag",
											"source": 6,
											"value": "190"
										},
										{
											"begin": 4864,
											"end": 4884,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4859,
											"end": 4884,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4859,
											"end": 4884,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4903,
											"end": 4904,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4893,
											"end": 4928,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 4893,
											"end": 4928,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4908,
											"end": 4926,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 4908,
											"end": 4926,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "120"
										},
										{
											"begin": 4908,
											"end": 4926,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4908,
											"end": 4926,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 4908,
											"end": 4926,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4893,
											"end": 4928,
											"name": "tag",
											"source": 6,
											"value": "191"
										},
										{
											"begin": 4893,
											"end": 4928,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4950,
											"end": 4951,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4947,
											"end": 4948,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 4943,
											"end": 4952,
											"name": "DIV",
											"source": 6
										},
										{
											"begin": 4938,
											"end": 4952,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4938,
											"end": 4952,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4773,
											"end": 4958,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4773,
											"end": 4958,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4773,
											"end": 4958,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4773,
											"end": 4958,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4773,
											"end": 4958,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4964,
											"end": 5155,
											"name": "tag",
											"source": 6,
											"value": "78"
										},
										{
											"begin": 4964,
											"end": 5155,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5004,
											"end": 5007,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5023,
											"end": 5043,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 5041,
											"end": 5042,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5023,
											"end": 5043,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 5023,
											"end": 5043,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5023,
											"end": 5043,
											"name": "tag",
											"source": 6,
											"value": "194"
										},
										{
											"begin": 5023,
											"end": 5043,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5018,
											"end": 5043,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5018,
											"end": 5043,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5057,
											"end": 5077,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 5075,
											"end": 5076,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5057,
											"end": 5077,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 5057,
											"end": 5077,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5057,
											"end": 5077,
											"name": "tag",
											"source": 6,
											"value": "195"
										},
										{
											"begin": 5057,
											"end": 5077,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5052,
											"end": 5077,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5052,
											"end": 5077,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5100,
											"end": 5101,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5097,
											"end": 5098,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5093,
											"end": 5102,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5086,
											"end": 5102,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5086,
											"end": 5102,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5121,
											"end": 5124,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5118,
											"end": 5119,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5115,
											"end": 5125,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 5112,
											"end": 5148,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5112,
											"end": 5148,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 5112,
											"end": 5148,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "119"
										},
										{
											"begin": 5128,
											"end": 5146,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "tag",
											"source": 6,
											"value": "197"
										},
										{
											"begin": 5128,
											"end": 5146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5112,
											"end": 5148,
											"name": "tag",
											"source": 6,
											"value": "196"
										},
										{
											"begin": 5112,
											"end": 5148,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4964,
											"end": 5155,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 4964,
											"end": 5155,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 4964,
											"end": 5155,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4964,
											"end": 5155,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 4964,
											"end": 5155,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5161,
											"end": 5603,
											"name": "tag",
											"source": 6,
											"value": "81"
										},
										{
											"begin": 5161,
											"end": 5603,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5310,
											"end": 5314,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5348,
											"end": 5350,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 5337,
											"end": 5346,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5333,
											"end": 5351,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5325,
											"end": 5351,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5325,
											"end": 5351,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5361,
											"end": 5432,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 5429,
											"end": 5430,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5418,
											"end": 5427,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5414,
											"end": 5431,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5405,
											"end": 5411,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 5361,
											"end": 5432,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 5361,
											"end": 5432,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5361,
											"end": 5432,
											"name": "tag",
											"source": 6,
											"value": "199"
										},
										{
											"begin": 5361,
											"end": 5432,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5442,
											"end": 5514,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 5510,
											"end": 5512,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 5499,
											"end": 5508,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5495,
											"end": 5513,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5486,
											"end": 5492,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 5442,
											"end": 5514,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 5442,
											"end": 5514,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5442,
											"end": 5514,
											"name": "tag",
											"source": 6,
											"value": "200"
										},
										{
											"begin": 5442,
											"end": 5514,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5524,
											"end": 5596,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 5592,
											"end": 5594,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5581,
											"end": 5590,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5577,
											"end": 5595,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5568,
											"end": 5574,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5524,
											"end": 5596,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 5524,
											"end": 5596,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5524,
											"end": 5596,
											"name": "tag",
											"source": 6,
											"value": "201"
										},
										{
											"begin": 5524,
											"end": 5596,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5161,
											"end": 5603,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 5161,
											"end": 5603,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 5161,
											"end": 5603,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5161,
											"end": 5603,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5161,
											"end": 5603,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5161,
											"end": 5603,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5161,
											"end": 5603,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5609,
											"end": 5699,
											"name": "tag",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 5609,
											"end": 5699,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5643,
											"end": 5650,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5686,
											"end": 5691,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5679,
											"end": 5692,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5672,
											"end": 5693,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5661,
											"end": 5693,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5661,
											"end": 5693,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5609,
											"end": 5699,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5609,
											"end": 5699,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5609,
											"end": 5699,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5609,
											"end": 5699,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5705,
											"end": 5821,
											"name": "tag",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 5705,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5775,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 5790,
											"end": 5795,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5775,
											"end": 5796,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "121"
										},
										{
											"begin": 5775,
											"end": 5796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5775,
											"end": 5796,
											"name": "tag",
											"source": 6,
											"value": "204"
										},
										{
											"begin": 5775,
											"end": 5796,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5768,
											"end": 5773,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5765,
											"end": 5797,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 5755,
											"end": 5815,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 5755,
											"end": 5815,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5811,
											"end": 5812,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5808,
											"end": 5809,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5801,
											"end": 5813,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5755,
											"end": 5815,
											"name": "tag",
											"source": 6,
											"value": "205"
										},
										{
											"begin": 5755,
											"end": 5815,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5705,
											"end": 5821,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5705,
											"end": 5821,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5827,
											"end": 5964,
											"name": "tag",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 5827,
											"end": 5964,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5881,
											"end": 5886,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5912,
											"end": 5918,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5906,
											"end": 5919,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 5897,
											"end": 5919,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5897,
											"end": 5919,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5928,
											"end": 5958,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 5952,
											"end": 5957,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5928,
											"end": 5958,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "122"
										},
										{
											"begin": 5928,
											"end": 5958,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5928,
											"end": 5958,
											"name": "tag",
											"source": 6,
											"value": "207"
										},
										{
											"begin": 5928,
											"end": 5958,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5827,
											"end": 5964,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5827,
											"end": 5964,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5827,
											"end": 5964,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5827,
											"end": 5964,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5827,
											"end": 5964,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5970,
											"end": 6315,
											"name": "tag",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 5970,
											"end": 6315,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6037,
											"end": 6043,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6086,
											"end": 6088,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6074,
											"end": 6083,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6065,
											"end": 6072,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6061,
											"end": 6084,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 6057,
											"end": 6089,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 6054,
											"end": 6173,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 6054,
											"end": 6173,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 6054,
											"end": 6173,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6092,
											"end": 6171,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 6092,
											"end": 6171,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "102"
										},
										{
											"begin": 6092,
											"end": 6171,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6092,
											"end": 6171,
											"name": "tag",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 6092,
											"end": 6171,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6054,
											"end": 6173,
											"name": "tag",
											"source": 6,
											"value": "209"
										},
										{
											"begin": 6054,
											"end": 6173,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6212,
											"end": 6213,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6237,
											"end": 6298,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 6290,
											"end": 6297,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 6281,
											"end": 6287,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6270,
											"end": 6279,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 6266,
											"end": 6288,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6237,
											"end": 6298,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "123"
										},
										{
											"begin": 6237,
											"end": 6298,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6237,
											"end": 6298,
											"name": "tag",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 6237,
											"end": 6298,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6227,
											"end": 6298,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6227,
											"end": 6298,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6183,
											"end": 6308,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5970,
											"end": 6315,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 5970,
											"end": 6315,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5970,
											"end": 6315,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5970,
											"end": 6315,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5970,
											"end": 6315,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6321,
											"end": 6490,
											"name": "tag",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 6321,
											"end": 6490,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6405,
											"end": 6416,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6439,
											"end": 6445,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6434,
											"end": 6437,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6427,
											"end": 6446,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6479,
											"end": 6483,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6474,
											"end": 6477,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6470,
											"end": 6484,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6455,
											"end": 6484,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6455,
											"end": 6484,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6321,
											"end": 6490,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 6321,
											"end": 6490,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6321,
											"end": 6490,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6321,
											"end": 6490,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6321,
											"end": 6490,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6496,
											"end": 6667,
											"name": "tag",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 6496,
											"end": 6667,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6636,
											"end": 6659,
											"name": "PUSH",
											"source": 6,
											"value": "4552433230207472616E73666572206661696C65640000000000000000000000"
										},
										{
											"begin": 6632,
											"end": 6633,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6624,
											"end": 6630,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6620,
											"end": 6634,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6613,
											"end": 6660,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6496,
											"end": 6667,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6496,
											"end": 6667,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6673,
											"end": 7039,
											"name": "tag",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 6673,
											"end": 7039,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6815,
											"end": 6818,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 6836,
											"end": 6903,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 6900,
											"end": 6902,
											"name": "PUSH",
											"source": 6,
											"value": "15"
										},
										{
											"begin": 6895,
											"end": 6898,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6836,
											"end": 6903,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "124"
										},
										{
											"begin": 6836,
											"end": 6903,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6836,
											"end": 6903,
											"name": "tag",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 6836,
											"end": 6903,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 6829,
											"end": 6903,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6829,
											"end": 6903,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6912,
											"end": 7005,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 7001,
											"end": 7004,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6912,
											"end": 7005,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "125"
										},
										{
											"begin": 6912,
											"end": 7005,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 6912,
											"end": 7005,
											"name": "tag",
											"source": 6,
											"value": "216"
										},
										{
											"begin": 6912,
											"end": 7005,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7030,
											"end": 7032,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7025,
											"end": 7028,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7021,
											"end": 7033,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7033,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7014,
											"end": 7033,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6673,
											"end": 7039,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 6673,
											"end": 7039,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6673,
											"end": 7039,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 6673,
											"end": 7039,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7045,
											"end": 7464,
											"name": "tag",
											"source": 6,
											"value": "88"
										},
										{
											"begin": 7045,
											"end": 7464,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7211,
											"end": 7215,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7249,
											"end": 7251,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7238,
											"end": 7247,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7234,
											"end": 7252,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7226,
											"end": 7252,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7226,
											"end": 7252,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7298,
											"end": 7307,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7292,
											"end": 7296,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7288,
											"end": 7308,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 7284,
											"end": 7285,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7273,
											"end": 7282,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7269,
											"end": 7286,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7262,
											"end": 7309,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 7326,
											"end": 7457,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 7452,
											"end": 7456,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 7326,
											"end": 7457,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "126"
										},
										{
											"begin": 7326,
											"end": 7457,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7326,
											"end": 7457,
											"name": "tag",
											"source": 6,
											"value": "218"
										},
										{
											"begin": 7326,
											"end": 7457,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7457,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7318,
											"end": 7457,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7045,
											"end": 7464,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 7045,
											"end": 7464,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7045,
											"end": 7464,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7045,
											"end": 7464,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7470,
											"end": 8023,
											"name": "tag",
											"source": 6,
											"value": "92"
										},
										{
											"begin": 7470,
											"end": 8023,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7647,
											"end": 7651,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7685,
											"end": 7688,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 7674,
											"end": 7683,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7670,
											"end": 7689,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7662,
											"end": 7689,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 7662,
											"end": 7689,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7699,
											"end": 7770,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 7767,
											"end": 7768,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 7756,
											"end": 7765,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7752,
											"end": 7769,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7743,
											"end": 7749,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 7699,
											"end": 7770,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 7699,
											"end": 7770,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7699,
											"end": 7770,
											"name": "tag",
											"source": 6,
											"value": "220"
										},
										{
											"begin": 7699,
											"end": 7770,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7780,
											"end": 7852,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 7848,
											"end": 7850,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 7837,
											"end": 7846,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7833,
											"end": 7851,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7824,
											"end": 7830,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 7780,
											"end": 7852,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 7780,
											"end": 7852,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7780,
											"end": 7852,
											"name": "tag",
											"source": 6,
											"value": "221"
										},
										{
											"begin": 7780,
											"end": 7852,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7862,
											"end": 7934,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 7930,
											"end": 7932,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 7919,
											"end": 7928,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7915,
											"end": 7933,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7906,
											"end": 7912,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 7862,
											"end": 7934,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 7862,
											"end": 7934,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7862,
											"end": 7934,
											"name": "tag",
											"source": 6,
											"value": "222"
										},
										{
											"begin": 7862,
											"end": 7934,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7944,
											"end": 8016,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 8012,
											"end": 8014,
											"name": "PUSH",
											"source": 6,
											"value": "60"
										},
										{
											"begin": 8001,
											"end": 8010,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 7997,
											"end": 8015,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 7988,
											"end": 7994,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 7944,
											"end": 8016,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 7944,
											"end": 8016,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 7944,
											"end": 8016,
											"name": "tag",
											"source": 6,
											"value": "223"
										},
										{
											"begin": 7944,
											"end": 8016,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 7470,
											"end": 8023,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": 7470,
											"end": 8023,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 7470,
											"end": 8023,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7470,
											"end": 8023,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7470,
											"end": 8023,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7470,
											"end": 8023,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7470,
											"end": 8023,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 7470,
											"end": 8023,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"contracts/Exchange.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"K()": "a932492f",
							"erc20Token()": "8a13eea7",
							"estimateERC20TokenToProvide(uint256)": "ed7bf868",
							"estimateEthToProvide(uint256)": "240f3dea",
							"getMyLiquidityPositions()": "e0ba2000",
							"liquidityPositions(address)": "6fd0ea92",
							"provideLiquidity(uint256)": "eb521a4c",
							"totalLiquidityPositions()": "1cde6226",
							"withdrawLiquidity(uint256)": "0a861f2a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountERC20TokenDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEthDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityPositionsIssued\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"K\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountEth\",\"type\":\"uint256\"}],\"name\":\"estimateERC20TokenToProvide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountERC20Token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountERC20Token\",\"type\":\"uint256\"}],\"name\":\"estimateEthToProvide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyLiquidityPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountERC20Token\",\"type\":\"uint256\"}],\"name\":\"provideLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityPositionsToBurn\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x30745a46aa78a205c91a028629a2878d6d6416c747e2a13041c68588d3053df7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://aeaea07fc60676cc3e2d2df8d36dd550ba8fa0bb1395178a9b764ab4c049d8a3\",\"dweb:/ipfs/QmeDqVsPV63rJj2uNPfg7SG5Z1KNP6vNgBN1F78kEmz1Jg\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4b66493cca45dc0ba9bdfb0a60970f9278c11da8de004339944ced80b86c55c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://17bd597781651d2f92f83c60588ed3033665b9e99ba01b2ee64a9cc4f01833bb\",\"dweb:/ipfs/Qmc1BpbKFzwVY5GcTFcShbgebCZNqXAWMorfZPHs43TL2S\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x4ce6e9f30dba5ae30f26321dc851b669caf3f953f8c832304d05df2a523f1af3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb24de66bbfa42093a20d448cb2564655525cba0342035a42a37654e5d922deb\",\"dweb:/ipfs/QmYgnFHamrgy5qurrxVLR1qDb7MirvGEoxCVwqiF1YvDMf\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xfc40fb05166e90621012a05da452eaa14315f16ccf51833fb9c824c40809b06b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0c048116af61532acce61f77cdf6e1a4c0195e1d9d2f297c9016b4463e526163\",\"dweb:/ipfs/QmfZ3hZ21ur1ysZsKdXh53LJ3GNZF9CK2UFD8QnAPi4wAJ\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xa1a93462fa05ab3ebbde01971ce1c6fb415761fbaab2710b70d0fbe1a53b0689\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://44fedd57d91bcaf205e97d8bc00ddbff05375e32a53bd30f7bfc49a629cc4439\",\"dweb:/ipfs/QmbBJN3zuGqmma6Bdij4AN5zHmgF7txVU1kzrU6rCyWvsW\"]},\"contracts/Exchange.sol\":{\"keccak256\":\"0xaf993cd485debb85517b783c1ca8bff27c5d2a085a367fcc40c747e6b50ff551\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://ad2a242c40237d2e75eb80903e21a7d214f956a416aaddcf6d3368d9aa7ae15f\",\"dweb:/ipfs/Qmb151sy4K54CNE9FeA8UmFZyb782hbuxPFpnj6jwyZSVx\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 783,
								"contract": "contracts/Exchange.sol:Exchange",
								"label": "erc20Token",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(ERC20)651"
							},
							{
								"astId": 785,
								"contract": "contracts/Exchange.sol:Exchange",
								"label": "totalLiquidityPositions",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 787,
								"contract": "contracts/Exchange.sol:Exchange",
								"label": "K",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 791,
								"contract": "contracts/Exchange.sol:Exchange",
								"label": "liquidityPositions",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(ERC20)651": {
								"encoding": "inplace",
								"label": "contract ERC20",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							136
						],
						"IERC20Errors": [
							41
						],
						"IERC721Errors": [
							89
						]
					},
					"id": 137,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:0",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 41,
							"linearizedBaseContracts": [
								41
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 11,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "652:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "668:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 6,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 11,
												"src": "685:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:0"
									},
									"src": "621:80:0"
								},
								{
									"documentation": {
										"id": 12,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 16,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "889:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:0"
									},
									"src": "864:41:0"
								},
								{
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 21,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 21,
												"src": "1102:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:0"
									},
									"src": "1075:45:0"
								},
								{
									"documentation": {
										"id": 22,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:0",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 30,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1509:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1526:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1545:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 27,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:0"
									},
									"src": "1476:85:0"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 35,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 35,
												"src": "1773:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:0"
									},
									"src": "1746:45:0"
								},
								{
									"documentation": {
										"id": 36,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:0",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 40,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "2023:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 37,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:0"
									},
									"src": "1997:43:0"
								}
							],
							"scope": 137,
							"src": "278:1764:0",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40
							]
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 42,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:0",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 89,
							"linearizedBaseContracts": [
								89
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:0",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 47,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 46,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 47,
												"src": "2465:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 44,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:0"
									},
									"src": "2440:40:0"
								},
								{
									"documentation": {
										"id": 48,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:0",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 52,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2652:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:0"
									},
									"src": "2623:46:0"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:0",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 61,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "2996:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3012:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 56,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3029:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 58,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:0"
									},
									"src": "2969:75:0"
								},
								{
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 66,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 66,
												"src": "3233:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 63,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:0"
									},
									"src": "3207:42:0"
								},
								{
									"documentation": {
										"id": 67,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 71,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "3447:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:0"
									},
									"src": "3419:46:0"
								},
								{
									"documentation": {
										"id": 72,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 78,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3756:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 73,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3774:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:0"
									},
									"src": "3723:68:0"
								},
								{
									"documentation": {
										"id": 79,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 83,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 83,
												"src": "4004:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:0"
									},
									"src": "3976:46:0"
								},
								{
									"documentation": {
										"id": 84,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 88,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 87,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 88,
												"src": "4258:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 85,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:0"
									},
									"src": "4230:46:0"
								}
							],
							"scope": 137,
							"src": "2186:2092:0",
							"usedErrors": [
								47,
								52,
								61,
								66,
								71,
								78,
								83,
								88
							]
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 90,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:0",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 136,
							"linearizedBaseContracts": [
								136
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 91,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:0",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 101,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4854:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4870:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 94,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4887:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "4903:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:0"
									},
									"src": "4821:99:0"
								},
								{
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:0",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 106,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "5110:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:0"
									},
									"src": "5083:43:0"
								},
								{
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:0",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 111,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "5325:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:0"
									},
									"src": "5296:47:0"
								},
								{
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:0",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 118,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "5645:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 118,
												"src": "5663:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 115,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:0"
									},
									"src": "5610:68:0"
								},
								{
									"documentation": {
										"id": 119,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:0",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 123,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 123,
												"src": "5892:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:0"
									},
									"src": "5863:47:0"
								},
								{
									"documentation": {
										"id": 124,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:0",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 128,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "6147:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 125,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:0"
									},
									"src": "6118:47:0"
								},
								{
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:0",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 135,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "6488:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "6507:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:0"
									},
									"src": "6456:73:0"
								}
							],
							"scope": 137,
							"src": "4424:2107:0",
							"usedErrors": [
								101,
								106,
								111,
								118,
								123,
								128,
								135
							]
						}
					],
					"src": "112:6420:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							777
						],
						"ERC20": [
							651
						],
						"IERC20": [
							729
						],
						"IERC20Errors": [
							41
						],
						"IERC20Metadata": [
							755
						]
					},
					"id": 652,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 138,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 140,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 730,
							"src": "131:36:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 139,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 729,
										"src": "139:6:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 142,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 756,
							"src": "168:63:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 141,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 755,
										"src": "176:14:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 144,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 778,
							"src": "232:48:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 143,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 777,
										"src": "240:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 146,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 652,
							"sourceUnit": 137,
							"src": "281:65:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 145,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 41,
										"src": "289:12:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 148,
										"name": "Context",
										"nameLocations": [
											"1428:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 777,
										"src": "1428:7:1"
									},
									"id": 149,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:1"
								},
								{
									"baseName": {
										"id": 150,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 729,
										"src": "1437:6:1"
									},
									"id": 151,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:1"
								},
								{
									"baseName": {
										"id": 152,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 755,
										"src": "1445:14:1"
									},
									"id": 153,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:1"
								},
								{
									"baseName": {
										"id": 154,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 41,
										"src": "1461:12:1"
									},
									"id": 155,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:1"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 147,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:1",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 651,
							"linearizedBaseContracts": [
								651,
								41,
								755,
								729,
								777
							],
							"name": "ERC20",
							"nameLocation": "1419:5:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 159,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1480:53:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 158,
										"keyName": "account",
										"keyNameLocation": "1496:7:1",
										"keyType": {
											"id": 156,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 157,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 165,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1540:83:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 164,
										"keyName": "account",
										"keyNameLocation": "1556:7:1",
										"keyType": {
											"id": 160,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 163,
											"keyName": "spender",
											"keyNameLocation": "1583:7:1",
											"keyType": {
												"id": 161,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:1",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 162,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 167,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1630:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 166,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 169,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1665:20:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 168,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 171,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 651,
									"src": "1691:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 170,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 187,
										"nodeType": "Block",
										"src": "1952:57:1",
										"statements": [
											{
												"expression": {
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 179,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 169,
														"src": "1962:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 180,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 174,
														"src": "1970:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 182,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:1"
											},
											{
												"expression": {
													"id": 185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 183,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 171,
														"src": "1985:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 184,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 176,
														"src": "1995:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 186,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:1"
											}
										]
									},
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:1",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 188,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1908:19:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 173,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1929:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 175,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:1"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:1"
									},
									"scope": 651,
									"src": "1896:113:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										742
									],
									"body": {
										"id": 196,
										"nodeType": "Block",
										"src": "2134:29:1",
										"statements": [
											{
												"expression": {
													"id": 194,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 169,
													"src": "2151:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 193,
												"id": 195,
												"nodeType": "Return",
												"src": "2144:12:1"
											}
										]
									},
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:1",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:1"
									},
									"returnParameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "2119:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 191,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:1"
									},
									"scope": 651,
									"src": "2074:89:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										748
									],
									"body": {
										"id": 205,
										"nodeType": "Block",
										"src": "2338:31:1",
										"statements": [
											{
												"expression": {
													"id": 203,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 171,
													"src": "2355:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 202,
												"id": 204,
												"nodeType": "Return",
												"src": "2348:14:1"
											}
										]
									},
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:1",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 206,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:1"
									},
									"returnParameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 206,
												"src": "2323:13:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 200,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:1"
									},
									"scope": 651,
									"src": "2276:93:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										754
									],
									"body": {
										"id": 214,
										"nodeType": "Block",
										"src": "3058:26:1",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 212,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:1",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 211,
												"id": 213,
												"nodeType": "Return",
												"src": "3068:9:1"
											}
										]
									},
									"documentation": {
										"id": 207,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:1",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:1"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 215,
												"src": "3051:5:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 209,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:1"
									},
									"scope": 651,
									"src": "3002:82:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										678
									],
									"body": {
										"id": 223,
										"nodeType": "Block",
										"src": "3205:36:1",
										"statements": [
											{
												"expression": {
													"id": 221,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 167,
													"src": "3222:12:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 220,
												"id": 222,
												"nodeType": "Return",
												"src": "3215:19:1"
											}
										]
									},
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:1",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 224,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:1"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 224,
												"src": "3196:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 218,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:1"
									},
									"scope": 651,
									"src": "3144:97:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										686
									],
									"body": {
										"id": 236,
										"nodeType": "Block",
										"src": "3373:42:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 232,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 159,
														"src": "3390:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 234,
													"indexExpression": {
														"id": 233,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 227,
														"src": "3400:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 231,
												"id": 235,
												"nodeType": "Return",
												"src": "3383:25:1"
											}
										]
									},
									"documentation": {
										"id": 225,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:1",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3318:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:1"
									},
									"returnParameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 237,
												"src": "3364:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:1"
									},
									"scope": 651,
									"src": "3299:116:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										696
									],
									"body": {
										"id": 260,
										"nodeType": "Block",
										"src": "3685:103:1",
										"statements": [
											{
												"assignments": [
													248
												],
												"declarations": [
													{
														"constant": false,
														"id": 248,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 260,
														"src": "3695:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 247,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 251,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 249,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "3711:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 250,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 253,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "3743:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 254,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 240,
															"src": "3750:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 255,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "3754:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 252,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 381,
														"src": "3733:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 258,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 246,
												"id": 259,
												"nodeType": "Return",
												"src": "3770:11:1"
											}
										]
									},
									"documentation": {
										"id": 238,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:1",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 240,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3628:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 239,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3640:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:1"
									},
									"returnParameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "3679:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 244,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:1"
									},
									"scope": 651,
									"src": "3610:178:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										706
									],
									"body": {
										"id": 277,
										"nodeType": "Block",
										"src": "3935:51:1",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 271,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 165,
															"src": "3952:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 273,
														"indexExpression": {
															"id": 272,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 264,
															"src": "3964:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 275,
													"indexExpression": {
														"id": 274,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 266,
														"src": "3971:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 270,
												"id": 276,
												"nodeType": "Return",
												"src": "3945:34:1"
											}
										]
									},
									"documentation": {
										"id": 262,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:1",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 278,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3865:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 263,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3880:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:1"
									},
									"returnParameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "3926:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:1"
									},
									"scope": 651,
									"src": "3846:140:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										716
									],
									"body": {
										"id": 301,
										"nodeType": "Block",
										"src": "4372:107:1",
										"statements": [
											{
												"assignments": [
													289
												],
												"declarations": [
													{
														"constant": false,
														"id": 289,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:1",
														"nodeType": "VariableDeclaration",
														"scope": 301,
														"src": "4382:13:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 288,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 292,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 290,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "4398:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 294,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 289,
															"src": "4429:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 295,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "4436:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 296,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 283,
															"src": "4445:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 293,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															542,
															602
														],
														"referencedDeclaration": 542,
														"src": "4420:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 298,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 299,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 287,
												"id": 300,
												"nodeType": "Return",
												"src": "4461:11:1"
											}
										]
									},
									"documentation": {
										"id": 279,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:1",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 302,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 281,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4310:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 280,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4327:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 282,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:1"
									},
									"returnParameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 302,
												"src": "4366:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 285,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:1"
									},
									"scope": 651,
									"src": "4293:186:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										728
									],
									"body": {
										"id": 333,
										"nodeType": "Block",
										"src": "5132:151:1",
										"statements": [
											{
												"assignments": [
													315
												],
												"declarations": [
													{
														"constant": false,
														"id": 315,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 333,
														"src": "5142:15:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 314,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 318,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 316,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 767,
														"src": "5160:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 320,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "5198:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 321,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 315,
															"src": "5204:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 322,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "5213:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 319,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "5182:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 324,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 326,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 305,
															"src": "5239:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 327,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 307,
															"src": "5245:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 328,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "5249:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 325,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 381,
														"src": "5229:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:1"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 313,
												"id": 332,
												"nodeType": "Return",
												"src": "5265:11:1"
											}
										]
									},
									"documentation": {
										"id": 303,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:1",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 305,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "5061:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 304,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 307,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "5075:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 306,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "5087:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:1"
									},
									"returnParameters": {
										"id": 313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 334,
												"src": "5126:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 311,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:1"
									},
									"scope": 651,
									"src": "5039:244:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 380,
										"nodeType": "Block",
										"src": "5725:231:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 344,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 337,
														"src": "5739:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 347,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 346,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 345,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 348,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 358,
												"nodeType": "IfStatement",
												"src": "5735:86:1",
												"trueBody": {
													"id": 357,
													"nodeType": "Block",
													"src": "5759:62:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 353,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 352,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 351,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 354,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 350,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "5780:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 356,
															"nodeType": "RevertStatement",
															"src": "5773:37:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 364,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 359,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 339,
														"src": "5834:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 362,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 361,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 360,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 363,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 373,
												"nodeType": "IfStatement",
												"src": "5830:86:1",
												"trueBody": {
													"id": 372,
													"nodeType": "Block",
													"src": "5852:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 368,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 367,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 366,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 369,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 365,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "5873:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 371,
															"nodeType": "RevertStatement",
															"src": "5866:39:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 375,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 337,
															"src": "5933:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 376,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 339,
															"src": "5939:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 377,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 341,
															"src": "5943:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 374,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "5925:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 379,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:1"
											}
										]
									},
									"documentation": {
										"id": 335,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:1",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 342,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 337,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5675:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5689:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 338,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 341,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "5701:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 340,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:1"
									},
									"returnParameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:1"
									},
									"scope": 651,
									"src": "5656:300:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 457,
										"nodeType": "Block",
										"src": "6346:1032:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 391,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 384,
														"src": "6360:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 394,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 393,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 392,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 395,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 428,
													"nodeType": "Block",
													"src": "6534:362:1",
													"statements": [
														{
															"assignments": [
																403
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 403,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:1",
																	"nodeType": "VariableDeclaration",
																	"scope": 428,
																	"src": "6548:19:1",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 402,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 407,
															"initialValue": {
																"baseExpression": {
																	"id": 404,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 159,
																	"src": "6570:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 406,
																"indexExpression": {
																	"id": 405,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 384,
																	"src": "6580:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:1"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 410,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 408,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 403,
																	"src": "6603:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 409,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "6617:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 418,
															"nodeType": "IfStatement",
															"src": "6599:115:1",
															"trueBody": {
																"id": 417,
																"nodeType": "Block",
																"src": "6624:90:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 412,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 384,
																					"src": "6674:4:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 413,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 403,
																					"src": "6680:11:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 414,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 388,
																					"src": "6693:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 411,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 11,
																				"src": "6649:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 415,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 416,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:1"
																	}
																]
															}
														},
														{
															"id": 427,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:1",
															"statements": [
																{
																	"expression": {
																		"id": 425,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 419,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "6834:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 421,
																			"indexExpression": {
																				"id": 420,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 384,
																				"src": "6844:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 424,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 422,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 403,
																				"src": "6852:11:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 423,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 388,
																				"src": "6866:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 426,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:1"
																}
															]
														}
													]
												},
												"id": 429,
												"nodeType": "IfStatement",
												"src": "6356:540:1",
												"trueBody": {
													"id": 401,
													"nodeType": "Block",
													"src": "6380:148:1",
													"statements": [
														{
															"expression": {
																"id": 399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 397,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 167,
																	"src": "6496:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 398,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "6512:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 400,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 435,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 430,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 386,
														"src": "6910:2:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 433,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 432,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 431,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 434,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 449,
													"nodeType": "Block",
													"src": "7125:206:1",
													"statements": [
														{
															"id": 448,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:1",
															"statements": [
																{
																	"expression": {
																		"id": 446,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 442,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 159,
																				"src": "7284:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 444,
																			"indexExpression": {
																				"id": 443,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 386,
																				"src": "7294:2:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 445,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "7301:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 447,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:1"
																}
															]
														}
													]
												},
												"id": 450,
												"nodeType": "IfStatement",
												"src": "6906:425:1",
												"trueBody": {
													"id": 441,
													"nodeType": "Block",
													"src": "6928:191:1",
													"statements": [
														{
															"id": 440,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:1",
															"statements": [
																{
																	"expression": {
																		"id": 438,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 436,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 167,
																			"src": "7073:12:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 437,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 388,
																			"src": "7089:5:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 439,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:1"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 452,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 384,
															"src": "7355:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 453,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 386,
															"src": "7361:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 454,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 388,
															"src": "7365:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 451,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 663,
														"src": "7346:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 455,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 456,
												"nodeType": "EmitStatement",
												"src": "7341:30:1"
											}
										]
									},
									"documentation": {
										"id": 382,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:1",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 458,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 389,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 384,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6288:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 386,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6302:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "6314:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:1"
									},
									"returnParameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:1"
									},
									"scope": 651,
									"src": "6271:1107:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 490,
										"nodeType": "Block",
										"src": "7777:152:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 471,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 466,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "7791:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 469,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 468,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 467,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 470,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 480,
												"nodeType": "IfStatement",
												"src": "7787:91:1",
												"trueBody": {
													"id": 479,
													"nodeType": "Block",
													"src": "7814:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 475,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 474,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 473,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 476,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 472,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "7835:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 477,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 478,
															"nodeType": "RevertStatement",
															"src": "7828:39:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 484,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 483,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 482,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 486,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 461,
															"src": "7907:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 487,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 463,
															"src": "7916:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 481,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "7887:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 489,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:1"
											}
										]
									},
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:1",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 491,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 461,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7736:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 460,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 463,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7753:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:1"
									},
									"returnParameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:1"
									},
									"scope": 651,
									"src": "7721:208:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 523,
										"nodeType": "Block",
										"src": "8303:150:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 499,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 494,
														"src": "8317:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 502,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 501,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 500,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 503,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 513,
												"nodeType": "IfStatement",
												"src": "8313:89:1",
												"trueBody": {
													"id": 512,
													"nodeType": "Block",
													"src": "8340:62:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 508,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 506,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 509,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 505,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 16,
																	"src": "8361:18:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 510,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 511,
															"nodeType": "RevertStatement",
															"src": "8354:37:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 515,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 494,
															"src": "8419:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 518,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 517,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 516,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 520,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 496,
															"src": "8440:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 514,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 458,
														"src": "8411:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 521,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 522,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:1"
											}
										]
									},
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:1",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 524,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 497,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "8262:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 493,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 496,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "8279:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 495,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:1"
									},
									"returnParameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:1"
									},
									"scope": 651,
									"src": "8247:206:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 541,
										"nodeType": "Block",
										"src": "9063:54:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 535,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 527,
															"src": "9082:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 536,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 529,
															"src": "9089:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 537,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 531,
															"src": "9098:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 538,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 534,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															542,
															602
														],
														"referencedDeclaration": 602,
														"src": "9073:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 540,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:1"
											}
										]
									},
									"documentation": {
										"id": 525,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:1",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 542,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 527,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "9007:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 526,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "9022:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 542,
												"src": "9039:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:1"
									},
									"returnParameters": {
										"id": 533,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:1"
									},
									"scope": 651,
									"src": "8989:128:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 601,
										"nodeType": "Block",
										"src": "10047:334:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 559,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 554,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 545,
														"src": "10061:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 557,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 555,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 558,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 568,
												"nodeType": "IfStatement",
												"src": "10057:89:1",
												"trueBody": {
													"id": 567,
													"nodeType": "Block",
													"src": "10082:64:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 563,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 562,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 561,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 560,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 35,
																	"src": "10103:20:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 565,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 566,
															"nodeType": "RevertStatement",
															"src": "10096:39:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 569,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 547,
														"src": "10159:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 571,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 570,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 573,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 583,
												"nodeType": "IfStatement",
												"src": "10155:90:1",
												"trueBody": {
													"id": 582,
													"nodeType": "Block",
													"src": "10182:63:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 578,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 577,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 576,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 579,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 575,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "10203:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 580,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 581,
															"nodeType": "RevertStatement",
															"src": "10196:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 584,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 165,
																"src": "10254:11:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 587,
															"indexExpression": {
																"id": 585,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 545,
																"src": "10266:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 588,
														"indexExpression": {
															"id": 586,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 547,
															"src": "10273:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 589,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 549,
														"src": "10284:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 591,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:1"
											},
											{
												"condition": {
													"id": 592,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 551,
													"src": "10303:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 600,
												"nodeType": "IfStatement",
												"src": "10299:76:1",
												"trueBody": {
													"id": 599,
													"nodeType": "Block",
													"src": "10314:61:1",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 594,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 545,
																		"src": "10342:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 595,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 547,
																		"src": "10349:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 596,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 549,
																		"src": "10358:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 593,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 672,
																	"src": "10333:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 598,
															"nodeType": "EmitStatement",
															"src": "10328:36:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 543,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:1",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 602,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 545,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9967:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 544,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9982:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 546,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 549,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "9999:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 602,
												"src": "10014:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 550,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:1"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:1"
									},
									"scope": 651,
									"src": "9949:432:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 649,
										"nodeType": "Block",
										"src": "10752:388:1",
										"statements": [
											{
												"assignments": [
													613
												],
												"declarations": [
													{
														"constant": false,
														"id": 613,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:1",
														"nodeType": "VariableDeclaration",
														"scope": 649,
														"src": "10762:24:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 612,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 618,
												"initialValue": {
													"arguments": [
														{
															"id": 615,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 605,
															"src": "10799:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 616,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 607,
															"src": "10806:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 614,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 278,
														"src": "10789:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 617,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 619,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 613,
														"src": "10828:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 622,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 621,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 620,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 623,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 624,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 648,
												"nodeType": "IfStatement",
												"src": "10824:310:1",
												"trueBody": {
													"id": 647,
													"nodeType": "Block",
													"src": "10867:267:1",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 628,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 626,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 613,
																	"src": "10885:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 627,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 609,
																	"src": "10904:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 636,
															"nodeType": "IfStatement",
															"src": "10881:130:1",
															"trueBody": {
																"id": 635,
																"nodeType": "Block",
																"src": "10911:100:1",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 630,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 607,
																					"src": "10963:7:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 631,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 613,
																					"src": "10972:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 632,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 609,
																					"src": "10990:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 629,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 30,
																				"src": "10936:26:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 633,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 634,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:1"
																	}
																]
															}
														},
														{
															"id": 646,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:1",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 638,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 605,
																				"src": "11061:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 639,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 607,
																				"src": "11068:7:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 642,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 640,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 613,
																					"src": "11077:16:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 641,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 609,
																					"src": "11096:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 643,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 637,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				542,
																				602
																			],
																			"referencedDeclaration": 602,
																			"src": "11052:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 644,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 645,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:1"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 603,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:1",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 650,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 610,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10688:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 604,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 607,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10703:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 606,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 609,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "10720:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:1"
									},
									"returnParameters": {
										"id": 611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:1"
									},
									"scope": 651,
									"src": "10663:477:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 652,
							"src": "1401:9741:1",
							"usedErrors": [
								11,
								16,
								21,
								30,
								35,
								40
							]
						}
					],
					"src": "105:11038:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							729
						]
					},
					"id": 730,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 653,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 654,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 729,
							"linearizedBaseContracts": [
								729
							],
							"name": "IERC20",
							"nameLocation": "213:6:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 655,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 663,
									"name": "Transfer",
									"nameLocation": "395:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 657,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "404:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 656,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 659,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "426:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 658,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 661,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "446:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 660,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:2"
									},
									"src": "389:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 672,
									"name": "Approval",
									"nameLocation": "626:8:2",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "635:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 665,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 668,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "658:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 667,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 670,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 672,
												"src": "683:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:2"
									},
									"src": "620:78:2"
								},
								{
									"documentation": {
										"id": 673,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:2",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 678,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 674,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:2"
									},
									"returnParameters": {
										"id": 677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 678,
												"src": "820:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 675,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:2"
									},
									"scope": 729,
									"src": "774:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 679,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:2",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 686,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "930:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:2"
									},
									"returnParameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 686,
												"src": "970:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:2"
									},
									"scope": 729,
									"src": "911:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 687,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:2",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 696,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1221:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1233:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 690,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:2"
									},
									"returnParameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 696,
												"src": "1266:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 693,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:2"
									},
									"scope": 729,
									"src": "1203:69:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 697,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 706,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 702,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1566:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1581:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 700,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:2"
									},
									"returnParameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "1621:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:2"
									},
									"scope": 729,
									"src": "1547:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:2",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 716,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2325:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2342:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 710,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:2"
									},
									"returnParameters": {
										"id": 715,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "2375:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 713,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:2"
									},
									"scope": 729,
									"src": "2308:73:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 717,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:2",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 728,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 719,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2711:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 718,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 721,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2725:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 720,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2737:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 722,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:2"
									},
									"returnParameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 726,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 728,
												"src": "2770:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 725,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:2"
									},
									"scope": 729,
									"src": "2689:87:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 730,
							"src": "203:2575:2",
							"usedErrors": []
						}
					],
					"src": "106:2673:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							729
						],
						"IERC20Metadata": [
							755
						]
					},
					"id": 756,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 731,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 733,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 756,
							"sourceUnit": 730,
							"src": "151:37:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 732,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 729,
										"src": "159:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 735,
										"name": "IERC20",
										"nameLocations": [
											"305:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 729,
										"src": "305:6:3"
									},
									"id": 736,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:3"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 734,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:3",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 755,
							"linearizedBaseContracts": [
								755,
								729
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 737,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 742,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:3"
									},
									"returnParameters": {
										"id": 741,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 742,
												"src": "416:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 739,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:3"
									},
									"scope": 755,
									"src": "377:54:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 743,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:3",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 748,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 744,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:3"
									},
									"returnParameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 748,
												"src": "539:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 745,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:3"
									},
									"scope": 755,
									"src": "498:56:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 749,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:3",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 754,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:3"
									},
									"returnParameters": {
										"id": 753,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 752,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 754,
												"src": "673:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 751,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:3"
									},
									"scope": 755,
									"src": "630:50:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 756,
							"src": "277:405:3",
							"usedErrors": []
						}
					],
					"src": "125:558:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							777
						]
					},
					"id": 778,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 757,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".19"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:4"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 758,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:4",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 777,
							"linearizedBaseContracts": [
								777
							],
							"name": "Context",
							"nameLocation": "642:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 766,
										"nodeType": "Block",
										"src": "718:34:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 763,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:4",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 762,
												"id": 765,
												"nodeType": "Return",
												"src": "728:17:4"
											}
										]
									},
									"id": 767,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 759,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:4"
									},
									"returnParameters": {
										"id": 762,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 761,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 767,
												"src": "709:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:4"
									},
									"scope": 777,
									"src": "656:96:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 775,
										"nodeType": "Block",
										"src": "825:32:4",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 772,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 773,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:4",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 771,
												"id": 774,
												"nodeType": "Return",
												"src": "835:15:4"
											}
										]
									},
									"id": 776,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:4"
									},
									"returnParameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "809:14:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 769,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:4"
									},
									"scope": 777,
									"src": "758:99:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 778,
							"src": "624:235:4",
							"usedErrors": []
						}
					],
					"src": "101:759:4"
				},
				"id": 4
			},
			"contracts/Exchange.sol": {
				"ast": {
					"absolutePath": "contracts/Exchange.sol",
					"exportedSymbols": {
						"Context": [
							777
						],
						"ERC20": [
							651
						],
						"Exchange": [
							1007
						],
						"IERC20": [
							729
						],
						"IERC20Errors": [
							41
						],
						"IERC20Metadata": [
							755
						]
					},
					"id": 1008,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 779,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".7"
							],
							"nodeType": "PragmaDirective",
							"src": "39:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 780,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1008,
							"sourceUnit": 652,
							"src": "64:55:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Exchange",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1007,
							"linearizedBaseContracts": [
								1007
							],
							"name": "Exchange",
							"nameLocation": "130:8:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "8a13eea7",
									"id": 783,
									"mutability": "mutable",
									"name": "erc20Token",
									"nameLocation": "158:10:5",
									"nodeType": "VariableDeclaration",
									"scope": 1007,
									"src": "145:23:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ERC20_$651",
										"typeString": "contract ERC20"
									},
									"typeName": {
										"id": 782,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 781,
											"name": "ERC20",
											"nameLocations": [
												"145:5:5"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 651,
											"src": "145:5:5"
										},
										"referencedDeclaration": 651,
										"src": "145:5:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ERC20_$651",
											"typeString": "contract ERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "1cde6226",
									"id": 785,
									"mutability": "mutable",
									"name": "totalLiquidityPositions",
									"nameLocation": "186:23:5",
									"nodeType": "VariableDeclaration",
									"scope": 1007,
									"src": "174:35:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 784,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "174:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a932492f",
									"id": 787,
									"mutability": "mutable",
									"name": "K",
									"nameLocation": "227:1:5",
									"nodeType": "VariableDeclaration",
									"scope": 1007,
									"src": "215:13:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 786,
										"name": "uint",
										"nodeType": "ElementaryTypeName",
										"src": "215:4:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "6fd0ea92",
									"id": 791,
									"mutability": "mutable",
									"name": "liquidityPositions",
									"nameLocation": "286:18:5",
									"nodeType": "VariableDeclaration",
									"scope": 1007,
									"src": "254:50:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 790,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 788,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "262:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "254:24:5",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 789,
											"name": "uint",
											"nodeType": "ElementaryTypeName",
											"src": "273:4:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 802,
										"nodeType": "Block",
										"src": "346:50:5",
										"statements": [
											{
												"expression": {
													"id": 800,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 796,
														"name": "erc20Token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 783,
														"src": "356:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$651",
															"typeString": "contract ERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 798,
																"name": "_erc20Address",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 793,
																"src": "375:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 797,
															"name": "ERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 651,
															"src": "369:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ERC20_$651_$",
																"typeString": "type(contract ERC20)"
															}
														},
														"id": 799,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "369:20:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ERC20_$651",
															"typeString": "contract ERC20"
														}
													},
													"src": "356:33:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ERC20_$651",
														"typeString": "contract ERC20"
													}
												},
												"id": 801,
												"nodeType": "ExpressionStatement",
												"src": "356:33:5"
											}
										]
									},
									"id": 803,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "_erc20Address",
												"nameLocation": "331:13:5",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "323:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 792,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "323:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "322:23:5"
									},
									"returnParameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "346:0:5"
									},
									"scope": 1007,
									"src": "311:85:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 891,
										"nodeType": "Block",
										"src": "492:905:5",
										"statements": [
											{
												"assignments": [
													811
												],
												"declarations": [
													{
														"constant": false,
														"id": 811,
														"mutability": "mutable",
														"name": "ethBalance",
														"nameLocation": "507:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 891,
														"src": "502:15:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 810,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "502:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 817,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 814,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "528:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Exchange_$1007",
																	"typeString": "contract Exchange"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Exchange_$1007",
																	"typeString": "contract Exchange"
																}
															],
															"id": 813,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "520:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 812,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "520:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 815,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "520:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "534:7:5",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "520:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "502:39:5"
											},
											{
												"assignments": [
													819
												],
												"declarations": [
													{
														"constant": false,
														"id": 819,
														"mutability": "mutable",
														"name": "erc20Balance",
														"nameLocation": "556:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 891,
														"src": "551:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 818,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "551:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 827,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 824,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "600:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Exchange_$1007",
																		"typeString": "contract Exchange"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Exchange_$1007",
																		"typeString": "contract Exchange"
																	}
																],
																"id": 823,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "592:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 822,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "592:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 825,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "592:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 820,
															"name": "erc20Token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "571:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ERC20_$651",
																"typeString": "contract ERC20"
															}
														},
														"id": 821,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "582:9:5",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 237,
														"src": "571:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 826,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "571:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "551:55:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 828,
														"name": "totalLiquidityPositions",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 785,
														"src": "620:23:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 829,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "647:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "620:28:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 844,
													"nodeType": "Block",
													"src": "746:162:5",
													"statements": [
														{
															"expression": {
																"id": 842,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 836,
																	"name": "liquidity",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 808,
																	"src": "827:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 841,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 839,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 837,
																			"name": "totalLiquidityPositions",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 785,
																			"src": "839:23:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 838,
																			"name": "_amountERC20Token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 805,
																			"src": "865:17:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "839:43:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 840,
																		"name": "erc20Balance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 819,
																		"src": "885:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "839:58:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "827:70:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 843,
															"nodeType": "ExpressionStatement",
															"src": "827:70:5"
														}
													]
												},
												"id": 845,
												"nodeType": "IfStatement",
												"src": "616:292:5",
												"trueBody": {
													"id": 835,
													"nodeType": "Block",
													"src": "650:90:5",
													"statements": [
														{
															"expression": {
																"id": 833,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 831,
																	"name": "liquidity",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 808,
																	"src": "664:9:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "313030",
																	"id": 832,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "676:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "664:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 834,
															"nodeType": "ExpressionStatement",
															"src": "664:15:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 846,
															"name": "liquidityPositions",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 791,
															"src": "917:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 849,
														"indexExpression": {
															"expression": {
																"id": 847,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "936:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "940:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "936:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "917:30:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 850,
														"name": "liquidity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 808,
														"src": "951:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "917:43:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 852,
												"nodeType": "ExpressionStatement",
												"src": "917:43:5"
											},
											{
												"expression": {
													"id": 855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 853,
														"name": "totalLiquidityPositions",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 785,
														"src": "970:23:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 854,
														"name": "liquidity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 808,
														"src": "997:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "970:36:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 856,
												"nodeType": "ExpressionStatement",
												"src": "970:36:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 860,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1111:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 861,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1115:6:5",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1111:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 864,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "1131:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Exchange_$1007",
																				"typeString": "contract Exchange"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Exchange_$1007",
																				"typeString": "contract Exchange"
																			}
																		],
																		"id": 863,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1123:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 862,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1123:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 865,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1123:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 866,
																	"name": "_amountERC20Token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 805,
																	"src": "1138:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 858,
																	"name": "erc20Token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 783,
																	"src": "1087:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC20_$651",
																		"typeString": "contract ERC20"
																	}
																},
																"id": 859,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1098:12:5",
																"memberName": "transferFrom",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 334,
																"src": "1087:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256) external returns (bool)"
																}
															},
															"id": 867,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1087:69:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552433230207472616e73666572206661696c6564",
															"id": 868,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1158:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff",
																"typeString": "literal_string \"ERC20 transfer failed\""
															},
															"value": "ERC20 transfer failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149f6edbc245165298a5933e2b8185447f0287d5f0366944583def754930bcff",
																"typeString": "literal_string \"ERC20 transfer failed\""
															}
														],
														"id": 857,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1079:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1079:103:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 870,
												"nodeType": "ExpressionStatement",
												"src": "1079:103:5"
											},
											{
												"expression": {
													"id": 878,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 871,
														"name": "K",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 787,
														"src": "1192:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 877,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 872,
															"name": "ethBalance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 811,
															"src": "1196:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 875,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 873,
																		"name": "erc20Balance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 819,
																		"src": "1210:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 874,
																		"name": "_amountERC20Token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 805,
																		"src": "1225:17:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1210:32:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 876,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1209:34:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1196:47:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1192:51:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 879,
												"nodeType": "ExpressionStatement",
												"src": "1192:51:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 881,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1276:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 882,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1280:6:5",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1276:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 883,
															"name": "_amountERC20Token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 805,
															"src": "1288:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 884,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1307:3:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 885,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1311:5:5",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "1307:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 886,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 808,
															"src": "1318:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 880,
														"name": "LiquidityProvided",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1006,
														"src": "1258:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256,uint256,uint256)"
														}
													},
													"id": 887,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1258:70:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 888,
												"nodeType": "EmitStatement",
												"src": "1253:75:5"
											},
											{
												"expression": {
													"id": 889,
													"name": "liquidity",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 808,
													"src": "1381:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 809,
												"id": 890,
												"nodeType": "Return",
												"src": "1374:16:5"
											}
										]
									},
									"functionSelector": "eb521a4c",
									"id": 892,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "provideLiquidity",
									"nameLocation": "411:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 806,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 805,
												"mutability": "mutable",
												"name": "_amountERC20Token",
												"nameLocation": "433:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "428:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 804,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "428:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "427:24:5"
									},
									"returnParameters": {
										"id": 809,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 808,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "481:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 892,
												"src": "476:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 807,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "476:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "475:16:5"
									},
									"scope": 1007,
									"src": "402:995:5",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 934,
										"nodeType": "Block",
										"src": "1494:521:5",
										"statements": [
											{
												"assignments": [
													900
												],
												"declarations": [
													{
														"constant": false,
														"id": 900,
														"mutability": "mutable",
														"name": "contractEthBalance",
														"nameLocation": "1509:18:5",
														"nodeType": "VariableDeclaration",
														"scope": 934,
														"src": "1504:23:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 899,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1504:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 906,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 903,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "1538:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Exchange_$1007",
																	"typeString": "contract Exchange"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Exchange_$1007",
																	"typeString": "contract Exchange"
																}
															],
															"id": 902,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1530:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 901,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1530:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 904,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1530:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 905,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1544:7:5",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "1530:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1504:47:5"
											},
											{
												"assignments": [
													908
												],
												"declarations": [
													{
														"constant": false,
														"id": 908,
														"mutability": "mutable",
														"name": "contractERC20TokenBalance",
														"nameLocation": "1566:25:5",
														"nodeType": "VariableDeclaration",
														"scope": 934,
														"src": "1561:30:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 907,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "1561:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 916,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 913,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1623:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Exchange_$1007",
																		"typeString": "contract Exchange"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Exchange_$1007",
																		"typeString": "contract Exchange"
																	}
																],
																"id": 912,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1615:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 911,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1615:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 914,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1615:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 909,
															"name": "erc20Token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "1594:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ERC20_$651",
																"typeString": "contract ERC20"
															}
														},
														"id": 910,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1605:9:5",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 237,
														"src": "1594:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1594:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1561:68:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 917,
														"name": "contractERC20TokenBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 908,
														"src": "1737:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 918,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1766:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1737:30:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 923,
												"nodeType": "IfStatement",
												"src": "1733:69:5",
												"trueBody": {
													"id": 922,
													"nodeType": "Block",
													"src": "1769:33:5",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 920,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1790:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 898,
															"id": 921,
															"nodeType": "Return",
															"src": "1783:8:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 924,
														"name": "amountEth",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 897,
														"src": "1904:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 929,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 927,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 925,
																"name": "contractEthBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 900,
																"src": "1916:18:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 926,
																"name": "_amountERC20Token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 894,
																"src": "1937:17:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1916:38:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 928,
															"name": "contractERC20TokenBalance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 908,
															"src": "1957:25:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1916:66:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1904:78:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 931,
												"nodeType": "ExpressionStatement",
												"src": "1904:78:5"
											},
											{
												"expression": {
													"id": 932,
													"name": "amountEth",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 897,
													"src": "1999:9:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 898,
												"id": 933,
												"nodeType": "Return",
												"src": "1992:16:5"
											}
										]
									},
									"functionSelector": "240f3dea",
									"id": 935,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "estimateEthToProvide",
									"nameLocation": "1412:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "_amountERC20Token",
												"nameLocation": "1438:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 935,
												"src": "1433:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 893,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1433:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1432:24:5"
									},
									"returnParameters": {
										"id": 898,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "amountEth",
												"nameLocation": "1483:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 935,
												"src": "1478:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 896,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1478:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1477:16:5"
									},
									"scope": 1007,
									"src": "1403:612:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 978,
										"nodeType": "Block",
										"src": "2119:429:5",
										"statements": [
											{
												"assignments": [
													943
												],
												"declarations": [
													{
														"constant": false,
														"id": 943,
														"mutability": "mutable",
														"name": "contractEthBalance",
														"nameLocation": "2134:18:5",
														"nodeType": "VariableDeclaration",
														"scope": 978,
														"src": "2129:23:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 942,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "2129:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 949,
												"initialValue": {
													"expression": {
														"arguments": [
															{
																"id": 946,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "2163:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_Exchange_$1007",
																	"typeString": "contract Exchange"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_Exchange_$1007",
																	"typeString": "contract Exchange"
																}
															],
															"id": 945,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2155:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 944,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2155:7:5",
																"typeDescriptions": {}
															}
														},
														"id": 947,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2155:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2169:7:5",
													"memberName": "balance",
													"nodeType": "MemberAccess",
													"src": "2155:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2129:47:5"
											},
											{
												"assignments": [
													951
												],
												"declarations": [
													{
														"constant": false,
														"id": 951,
														"mutability": "mutable",
														"name": "contractERC20TokenBalance",
														"nameLocation": "2191:25:5",
														"nodeType": "VariableDeclaration",
														"scope": 978,
														"src": "2186:30:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 950,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "2186:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 959,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 956,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2248:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Exchange_$1007",
																		"typeString": "contract Exchange"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Exchange_$1007",
																		"typeString": "contract Exchange"
																	}
																],
																"id": 955,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2240:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 954,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2240:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 957,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2240:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 952,
															"name": "erc20Token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "2219:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ERC20_$651",
																"typeString": "contract ERC20"
															}
														},
														"id": 953,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2230:9:5",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 237,
														"src": "2219:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2219:35:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2186:68:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 962,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 960,
														"name": "contractERC20TokenBalance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 951,
														"src": "2268:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 961,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2297:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2268:30:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 966,
												"nodeType": "IfStatement",
												"src": "2264:69:5",
												"trueBody": {
													"id": 965,
													"nodeType": "Block",
													"src": "2300:33:5",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 963,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2321:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 941,
															"id": 964,
															"nodeType": "Return",
															"src": "2314:8:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 974,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 967,
														"name": "amountERC20Token",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 940,
														"src": "2430:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 973,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 968,
															"name": "contractERC20TokenBalance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 951,
															"src": "2449:25:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 971,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 969,
																		"name": "_amountEth",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 937,
																		"src": "2478:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 970,
																		"name": "contractEthBalance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 943,
																		"src": "2489:18:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2478:29:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 972,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2477:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2449:59:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2430:78:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 975,
												"nodeType": "ExpressionStatement",
												"src": "2430:78:5"
											},
											{
												"expression": {
													"id": 976,
													"name": "amountERC20Token",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 940,
													"src": "2525:16:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 941,
												"id": 977,
												"nodeType": "Return",
												"src": "2518:23:5"
											}
										]
									},
									"functionSelector": "ed7bf868",
									"id": 979,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "estimateERC20TokenToProvide",
									"nameLocation": "2030:27:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "_amountEth",
												"nameLocation": "2063:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "2058:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 936,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2058:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2057:17:5"
									},
									"returnParameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "amountERC20Token",
												"nameLocation": "2101:16:5",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "2096:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 939,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2096:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2095:23:5"
									},
									"scope": 1007,
									"src": "2021:527:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 989,
										"nodeType": "Block",
										"src": "2618:54:5",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 984,
														"name": "liquidityPositions",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 791,
														"src": "2635:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 987,
													"indexExpression": {
														"expression": {
															"id": 985,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "2654:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 986,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2658:6:5",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "2654:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2635:30:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 983,
												"id": 988,
												"nodeType": "Return",
												"src": "2628:37:5"
											}
										]
									},
									"functionSelector": "e0ba2000",
									"id": 990,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMyLiquidityPositions",
									"nameLocation": "2563:23:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2586:2:5"
									},
									"returnParameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "2612:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 981,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2612:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2611:6:5"
									},
									"scope": 1007,
									"src": "2554:118:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 995,
										"nodeType": "Block",
										"src": "2752:126:5",
										"statements": []
									},
									"functionSelector": "0a861f2a",
									"id": 996,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawLiquidity",
									"nameLocation": "2687:17:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "_liquidityPositionsToBurn",
												"nameLocation": "2710:25:5",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "2705:30:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 991,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2705:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2704:32:5"
									},
									"returnParameters": {
										"id": 994,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2752:0:5"
									},
									"scope": 1007,
									"src": "2678:200:5",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f500",
									"id": 1006,
									"name": "LiquidityProvided",
									"nameLocation": "2903:17:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 998,
												"indexed": false,
												"mutability": "mutable",
												"name": "provider",
												"nameLocation": "2929:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "2921:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 997,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2921:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1000,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountERC20TokenDeposited",
												"nameLocation": "2944:25:5",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "2939:30:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 999,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2939:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1002,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountEthDeposited",
												"nameLocation": "2976:18:5",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "2971:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1001,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2971:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1004,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidityPositionsIssued",
												"nameLocation": "3001:24:5",
												"nodeType": "VariableDeclaration",
												"scope": 1006,
												"src": "2996:29:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1003,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "2996:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2920:106:5"
									},
									"src": "2897:130:5"
								}
							],
							"scope": 1008,
							"src": "121:2908:5",
							"usedErrors": []
						}
					],
					"src": "39:2991:5"
				},
				"id": 5
			}
		}
	}
}